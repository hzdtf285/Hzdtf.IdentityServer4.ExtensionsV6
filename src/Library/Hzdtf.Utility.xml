<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hzdtf.Utility</name>
    </assembly>
    <members>
        <member name="T:Hzdtf.Utility.Android.AndroidInfo">
            <summary>
            安卓信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Android.AndroidInfo.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Android.AndroidInfo.Settings">
            <summary>
            节点属性集合
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Android.AndroidAppInfo">
            <summary>
            安卓应用信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Android.AndroidAppInfo.PackageName">
            <summary>
            包名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Android.AndroidAppInfo.VersionCode">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Android.AndroidAppInfo.VersionName">
            <summary>
            版本
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Android.ApkUtil">
            <summary>
            Apk辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Android.ApkUtil.GetAppInfo(System.String)">
            <summary>
            获取应用信息
            </summary>
            <param name="apkFileName">apk文件名</param>
            <returns>应用信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Android.ApkUtil.GetAppInfo(System.IO.Stream)">
            <summary>
            获取应用信息
            </summary>
            <param name="apkStream">apk流</param>
            <returns>应用信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Android.ApkUtil.GetManifestInfo(System.String)">
            <summary>
            获取主配置文件信息
            </summary>
            <param name="apkFileName">apk文件名</param>
            <returns>安卓信息列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Android.ApkUtil.GetManifestInfo(System.IO.Stream)">
            <summary>
            获取主配置文件信息
            </summary>
            <param name="apkStream">apk流</param>
            <returns>安卓信息列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Android.ApkUtil.ToAppInfo(System.Collections.Generic.IList{Hzdtf.Utility.Android.AndroidInfo})">
            <summary>
            将安卓信息列表转换为安卓应用信息
            </summary>
            <param name="androids">安卓信息列表</param>
            <returns>安卓应用信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Android.ApkUtil.ReaderApkFileName(System.String,System.Action{System.IO.Stream})">
            <summary>
            读取apk文件流
            </summary>
            <param name="apkFileName">apk文件名</param>
            <param name="action">回调</param>
        </member>
        <member name="T:Hzdtf.Utility.App">
            <summary>
            应用类
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.CurrConfig">
            <summary>
            当前配置，通常在程序启动时设置，是一个全局配置
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.MaxPageSize">
            <summary>
            最大每页记录数
            -1表示不限制，默认为-1
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.syncCurrApplicationName">
            <summary>
            同步当前应用程序名称
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.currApplicationName">
            <summary>
            当前应用程序名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.CurrApplicationName">
            <summary>
            当前应用程序名称
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.syncCurrServiceName">
            <summary>
            同步服务名
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.currServiceName">
            <summary>
            当前服务名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.CurrServiceName">
            <summary>
            当前服务名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.AppServiceName">
            <summary>
            应用服务名
            如果当前服务名不为空，则取当前服务名，否则取当前应用程序名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.CurrEnvironmentType">
            <summary>
            当前环境类型
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.GetCurrEnvironmentTypeFunc">
            <summary>
            获取当前环境类型回调
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.ConnectionEncryption">
            <summary>
            连接加密
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.DefaultConnectionString">
            <summary>
            默认连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.SlaveConnectionString">
            <summary>
            从库连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.TestDefaultConnectionString">
            <summary>
            测试默认连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.TestSlaveConnectionString">
            <summary>
            测试从库连接字符串
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.App.GetConnectionString(System.String)">
            <summary>
            根据名称获取直通连接字符串
            </summary>
            <param name="name">名称</param>
            <returns>连接字符串</returns>
        </member>
        <member name="F:Hzdtf.Utility.App.defaultUploadImageExpands">
            <summary>
            默认上传图片的扩展名集合
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.syncAllowUploadImageExpands">
            <summary>
            同步默认上传图片的扩展名集合
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.AllowUploadImageExpands">
            <summary>
            默认上传图片的扩展名集合
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.App.FilterConnectionString(System.String)">
            <summary>
            过滤连接字符串
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns>过滤后的连接字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.App.GetDirectConnectionString(System.String)">
            <summary>
            根据名称获取直通连接字符串
            </summary>
            <param name="name">名称</param>
            <returns>连接字符串</returns>
        </member>
        <member name="F:Hzdtf.Utility.App.defaultCulture">
            <summary>
            默认文化
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.syncDefaultCulture">
            <summary>
            同步默认文化
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.DefaultCulture">
            <summary>
            默认文化，默认值取当前线程
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.IsReturnCulture">
            <summary>
            返回对象是否返回文化，默认为否，如果要返回，则程序启动时需要设置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.EVENT_ID_KEY">
            <summary>
            事件ID键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.GetTokenFunc">
            <summary>
            获取token回调
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.GetEventIdFunc">
            <summary>
            获取事件ID回调
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.TheOperation">
            <summary>
            本次操作
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.InfoEvent">
            <summary>
            信息事件
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.App.EventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.App.Instance">
            <summary>
            当前服务提供者实例
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.App.GetServiceFromInstance``1">
            <summary>
            从当前服务提供者实例获取服务
            </summary>
            <typeparam name="T">服务类型</typeparam>
            <returns>服务</returns>
        </member>
        <member name="M:Hzdtf.Utility.App.ServiceInstanceNotNullExecute(System.Action,System.UInt16,System.Byte)">
            <summary>
            如果服务实例（App.Instance）不为null则执行回调
            超过重试过后，还是为null，则会抛出ArgumentNullException异常
            </summary>
            <param name="callback">回调</param>
            <param name="nullWaitMilllSenconds">为null时等待毫秒数</param>
            <param name="maxRetryCount">最大重试次数</param>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseInt">
            <summary>
            异步释放整型
            提供对本地线程阻塞，在本进程内，另处进行线程继续执行(释放)
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseLong">
            <summary>
            异步释放长整型
            提供对本地线程阻塞，在本进程内，另处进行线程继续执行(释放)
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseString">
            <summary>
            异步释放字符串型
            提供对本地线程阻塞，在本进程内，另处进行线程继续执行(释放)
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseWrap`1">
            <summary>
            异步释放包装
            提供对本地线程阻塞，在本进程内，另处进行线程继续执行(释放)
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseWrap`1.dicCaches">
            <summary>
            缓存键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseWrap`1.syncDicCaches">
            <summary>
            同步缓存键
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseWrap`1.Wait(`0,System.Nullable{System.TimeSpan})">
            <summary>
            等待
            </summary>
            <param name="key">键</param>
            <param name="timeout">超时，默认永不超时</param>
            <returns>回调的返回值。例如：如果超时，则返回false</returns>
        </member>
        <member name="M:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseWrap`1.Wait(`0,System.Object@,System.Nullable{System.TimeSpan})">
            <summary>
            等待
            </summary>
            <param name="key">键</param>
            <param name="returnValue">返回值</param>
            <param name="timeout">超时，默认永不超时</param>
            <returns>是否接收到信号。例如：如果超时，则返回false</returns>
        </member>
        <member name="M:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseWrap`1.Release(`0,System.Object)">
            <summary>
            释放
            </summary>
            <param name="key">键</param>
            <param name="callbackReturnValue">回调的返回值</param>
            <returns>是否释放成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseWrap`1.GetCache">
            <summary>
            获取缓存对象
            </summary>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.AsyncCallbackWrap.AsyncReleaseWrap`1.GetSyncCache">
            <summary>
            获取同步缓存对象
            </summary>
            <returns>同步缓存对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.AutoResetReturnInfo">
            <summary>
            自动重置返回信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AsyncCallbackWrap.AutoResetReturnInfo.AutoReset">
            <summary>
            自动重置事件
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AsyncCallbackWrap.AutoResetReturnInfo.CallbackReturn">
            <summary>
            回调返回
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.IAsyncReleaseInt">
            <summary>
            异步释放整型接口
            提供对本地线程阻塞，在本进程内，另处进行线程继续执行(释放)
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.IAsyncReleaseLong">
            <summary>
            异步释放长整型接口
            提供对本地线程阻塞，在本进程内，另处进行线程继续执行(释放)
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.IAsyncReleaseString">
            <summary>
            异步释放字符串接口
            提供对本地线程阻塞，在本进程内，另处进行线程继续执行(释放)
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AsyncCallbackWrap.IAsyncReleaseWrap`1">
            <summary>
            异步释放包装接口
            提供对本地线程阻塞，在本进程内，另处进行线程继续执行(释放)
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.AsyncCallbackWrap.IAsyncReleaseWrap`1.Wait(`0,System.Nullable{System.TimeSpan})">
            <summary>
            等待
            </summary>
            <param name="key">键</param>
            <param name="timeout">超时，默认永不超时</param>
            <returns>回调的返回值。例如：如果超时，则返回false</returns>
        </member>
        <member name="M:Hzdtf.Utility.AsyncCallbackWrap.IAsyncReleaseWrap`1.Wait(`0,System.Object@,System.Nullable{System.TimeSpan})">
            <summary>
            等待
            </summary>
            <param name="key">键</param>
            <param name="returnValue">返回值</param>
            <param name="timeout">超时，默认永不超时</param>
            <returns>是否接收到信号。例如：如果超时，则返回false</returns>
        </member>
        <member name="M:Hzdtf.Utility.AsyncCallbackWrap.IAsyncReleaseWrap`1.Release(`0,System.Object)">
            <summary>
            释放
            </summary>
            <param name="key">键</param>
            <param name="callbackReturnValue">回调的返回值</param>
            <returns>是否释放成功</returns>
        </member>
        <member name="T:Hzdtf.Utility.Attr.AuthAttribute">
            <summary>
            授权特性
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.AuthAttribute.CurrUserParamIndex">
            <summary>
            当前用户位置索引
            默认为-1，为-1时，表示方法没有传当前用户参数
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.CodeAttributeBase">
            <summary>
            编码特性基类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Attr.CodeAttributeBase.code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.CodeAttributeBase.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.CodeAttributeBase.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="T:Hzdtf.Utility.Attr.DisabledAttribute">
            <summary>
            禁止特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.DisplayValueConvertAttribute">
            <summary>
            显示值转换特性
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Attr.DisplayValueConvertAttribute.valueToTextConvert">
            <summary>
            值到文本转换
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.DisplayValueConvertAttribute.ValueToTextConvert">
            <summary>
            值到文本转换
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Attr.DisplayValueConvertAttribute.textToValueConvert">
            <summary>
            文本到值转换
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.DisplayValueConvertAttribute.TextToValueConvert">
            <summary>
            文本到值转换
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.DisplayValueConvertAttribute.#ctor(System.Type,System.Type)">
            <summary>
            构造方法
            </summary>
            <param name="valueToTextConvert">值到文本转换类型</param>
            <param name="textToValueConvert">文本到值转换类型</param>
        </member>
        <member name="T:Hzdtf.Utility.Attr.FunctionAttribute">
            <summary>
            功能特性
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.FunctionAttribute.#ctor(System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="T:Hzdtf.Utility.Attr.IgnorePermissionAttribute">
            <summary>
            忽略权限特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.InjectAttribute">
            <summary>
            注入特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.MenuAttribute">
            <summary>
            菜单特性
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.MenuAttribute.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="T:Hzdtf.Utility.Attr.MenuFunctionAttribute">
            <summary>
            菜单功能特性
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Attr.MenuFunctionAttribute.menuCode">
            <summary>
            菜单编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.MenuFunctionAttribute.MenuCode">
            <summary>
            菜单编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Attr.MenuFunctionAttribute.functionCode">
            <summary>
            功能编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.MenuFunctionAttribute.FunctionCode">
            <summary>
            功能编码
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.MenuFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="menuCode">菜单编码</param>
            <param name="functionCode">功能编码</param>
        </member>
        <member name="T:Hzdtf.Utility.Attr.MuliCodeAttributeBase">
            <summary>
            多个编码特性基类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Attr.MuliCodeAttributeBase.codes">
            <summary>
            编码集合
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.MuliCodeAttributeBase.Codes">
            <summary>
            编码集合
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.MuliCodeAttributeBase.#ctor(System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="T:Hzdtf.Utility.Attr.NotTryExceptionAttribute">
            <summary>
            不捕获异常特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ParamAttr.ArrayNotEmptyAttribute">
            <summary>
            数组不为空特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ParamAttr.DisplayName2Attribute">
            <summary>
            显示名2特性
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Attr.ParamAttr.DisplayName2Attribute.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.ParamAttr.DisplayName2Attribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.ParamAttr.DisplayName2Attribute.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ParamAttr.IdAttribute">
            <summary>
            ID特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ParamAttr.ModelAttribute">
            <summary>
            模型特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ParamAttr.MultiModelAttribute">
            <summary>
            多个模型特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ParamAttr.PageIndexAttribute">
            <summary>
            页码特性
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ParamAttr.PageSizeAttribute">
            <summary>
            每页记录数特性
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Attr.ParamAttr.PageSizeAttribute.maxPageSize">
            <summary>
            每页最大记录数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.ParamAttr.PageSizeAttribute.MaxPageSize">
            <summary>
            每页最大记录数
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.ParamAttr.PageSizeAttribute.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Attr.ParamAttr.PageSizeAttribute.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="maxPageSize">每页最大记录数</param>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ProcTrackLogAttribute">
            <summary>
            过程轨迹日志特性
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.ProcTrackLogAttribute.ExecProc">
            <summary>
            记录执行过程，默认为是
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.ProcTrackLogAttribute.IgnoreParamValues">
            <summary>
            忽略参数值
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.ProcTrackLogAttribute.IgnoreParamReturn">
            <summary>
            忽略返回值
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.TransactionAttribute">
            <summary>
            事务特性
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.ConnectionIdIndex">
            <summary>
            连接ID位置索引
            默认为-1，为-1时，表示方法没有连接ID的参数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.Level">
            <summary>
            事务等级
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.IsDistribute">
            <summary>
            是否分布式事务，默认为否
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.BeforeMethod">
            <summary>
            执行事务方法前的方法名
            方法名必须是public
            用法主要在事务开启之前，需要从持久化读取数据，而读取数据一般不需要加入事务，因为一旦读取加入事务，在事务完成之前会锁定读取的数据范围，影响性能
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.BeforeMethodUseCache">
            <summary>
            执行事务方法前的方法是否使用缓存
            如果使用的单实例，建议使用以提高性能。否则不需要使用
            默认为否
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.BeforeMethodReturnValueInIndex">
            <summary>
            执行方法前的方法返回值输入位置索引
            默认为-1，为-1时，表示方法没有返回值
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.TransactionAttribute.CommonUseDataIndex">
            <summary>
            通用使用数据位置索引
            默认为-1，为-1时，表示方法没有连接ID的参数
            如果在事务提交成功后要执行后续的方法，请使用此参数，且添加CommonUseData.AddCallback。回调后，会自动清空所有回调
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Attr.ValiAttribute">
            <summary>
            验证特性
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.ValiAttribute.Indexs">
            <summary>
            索引位置集合
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Attr.ValiAttribute.Handlers">
            <summary>
            处理集合
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil">
            <summary>
            自动映射辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.mapperConfiguration">
            <summary>
            自动映射配置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.syncMapper">
            <summary>
            同步映射
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.mapper">
            <summary>
            映射
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.Mapper">
            <summary>
            映射
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.configs">
            <summary>
            配置列表
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.mapperConfigs">
            <summary>
            自动映射配置列表
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.RegisterConfig(System.Action{AutoMapper.IMapperConfigurationExpression})">
            <summary>
            注册配置
            </summary>
            <param name="config">配置回调</param>
        </member>
        <member name="M:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.AutoRegisterConfig(System.String[])">
            <summary>
            自动找出实现IAutoMapperConfig接口的配置
            </summary>
            <param name="assemblyNames">程序集名数组</param>
        </member>
        <member name="M:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.AutoRegisterConfig(System.Reflection.Assembly[])">
            <summary>
            自动找出实现IAutoMapperConfig接口的配置
            </summary>
            <param name="assemblies">程序集数组</param>
        </member>
        <member name="M:Hzdtf.Utility.AutoMapperExtensions.AutoMapperUtil.Builder">
            <summary>
            生成映射配置
            会循环生成注册的配置
            程序启动时执行，只需执行一次
            如果已经生成过，则会忽略
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AutoMapperExtensions.IAutoMapperConfig">
            <summary>
            自动映射配置接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AutoMapperExtensions.IAutoMapperConfig.Register(AutoMapper.IMapperConfigurationExpression)">
            <summary>
            注册
            </summary>
            <param name="config">配置</param>
        </member>
        <member name="T:Hzdtf.Utility.Cache.IListCache`1">
            <summary>
            列表缓存接口
            @ 黄振东
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Cache.IListCache`1.Count">
            <summary>
            缓存键数量
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.IListCache`1.Add(`0)">
            <summary>
            添加
            </summary>
            <param name="item">选项</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.IListCache`1.Remove(`0)">
            <summary>
            根据选项移除
            </summary>
            <param name="item">选项</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.IListCache`1.Exists(`0)">
            <summary>
            判断选项是否存在
            </summary>
            <param name="item">选项</param>
            <returns>选项是否存在</returns>
        </member>
        <member name="T:Hzdtf.Utility.Cache.ISingleTypeCache`2">
            <summary>
            单类型缓存接口
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Cache.ISingleTypeCache`2.Count">
            <summary>
            缓存键数量
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ISingleTypeCache`2.Add(`0,`1)">
            <summary>
            添加
            如果存在则不添加，返回false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ISingleTypeCache`2.Update(`0,`1)">
            <summary>
            更新
            如果不存在则不更新，返回false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ISingleTypeCache`2.Set(`0,`1)">
            <summary>
            设置
            如果存在则更新，不存在则添加
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ISingleTypeCache`2.Remove(`0)">
            <summary>
            根据键移除
            </summary>
            <param name="key">键</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ISingleTypeCache`2.Remove(`0[])">
            <summary>
            移除
            </summary>
            <param name="keys">键数组</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ISingleTypeCache`2.Exists(`0)">
            <summary>
            判断键是否存在
            </summary>
            <param name="key">键</param>
            <returns>键是否存在</returns>
        </member>
        <member name="T:Hzdtf.Utility.Cache.ListLocalMemoryBase`1">
            <summary>
            列表本地内存基类
            @ 黄振东
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.Count">
            <summary>
            缓存选项数量
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.Exists(`0)">
            <summary>
            判断选项是否存在
            </summary>
            <param name="item">选项</param>
            <returns>选项是否存在</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.Add(`0)">
            <summary>
            添加
            如果存在则不添加，返回false
            </summary>
            <param name="item">选项</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.Remove(`0)">
            <summary>
            移除
            如果存在则删除并返回true，否则返回false
            </summary>
            <param name="item">选项</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.ReaderAll">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.ListLocalMemoryBase`1.SetAll(System.Collections.Generic.IList{`0})">
            <summary>
            设置全部
            </summary>
            <param name="list">列表</param>
        </member>
        <member name="T:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2">
            <summary>
            单类型的本地内存基类
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Count">
            <summary>
            缓存键数量
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Exists(`0)">
            <summary>
            判断键是否存在
            </summary>
            <param name="key">键</param>
            <returns>键是否存在</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Get(`0)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Add(`0,`1)">
            <summary>
            添加
            如果存在则不添加，返回false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Update(`0,`1)">
            <summary>
            更新
            如果不存在则不更新，返回false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Set(`0,`1)">
            <summary>
            设置
            如果存在则更新，不存在则添加
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Remove(`0)">
            <summary>
            移除
            如果存在则删除并返回true，否则返回false
            </summary>
            <param name="key">键</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Remove(`0[])">
            <summary>
            移除
            </summary>
            <param name="keys">键数组</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.SingleTypeLocalMemoryBase`2.SetAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            设置全部
            </summary>
            <param name="keyValues">键值对</param>
        </member>
        <member name="T:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1">
            <summary>
            定时刷新缓存基类
            @ 黄振东
            </summary>
            <typeparam name="ValueT">值类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.timer">
            <summary>
            定时器
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.caches">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.isRefreshed">
            <summary>
            是否已刷新
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.state">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.intervalMillseconds">
            <summary>
            间隔时间，单位：毫秒
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.#ctor(System.Int32,System.Object,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="intervalMillseconds">间隔时间，单位：毫秒</param>
            <param name="isInitTimer">是否初始化定时器，默认为是</param>
            <param name="state">状态</param>
        </member>
        <member name="M:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.Refresh(System.Object)">
            <summary>
            刷新
            </summary>
            <param name="state">状态</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.Finalize">
            <summary>
            析构方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Cache.TimerRefresh.TimerRefreshCacheBase`1.InitTimer">
            <summary>
            初始化定时器
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.CommonCodeDefine">
            <summary>
            公共编码定义
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.CommonCodeDefine.NOT_PERMISSION">
            <summary>
            没有权限
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.CommonCodeDefine.NOT_PERMISSION_CULTURE_KEY">
            <summary>
            没有权限文化键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.CommonCodeDefine.DISABLED_ACCESS_CULTURE_KEY">
            <summary>
            禁止访问文化键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.CommonCodeDefine.OPER_SUCCESS_KEY">
            <summary>
            操作成功文化键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.CommonCodeDefine.OPER_FAILURE_KEY">
            <summary>
            操作失败文化键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.CommonCodeDefine.SYSTEM_EXCEPTION_KEY">
            <summary>
            系统发生异常
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigInfo">
            <summary>
            程序集配置信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigInfo.Entrances">
            <summary>
            入口集合
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigInfo.Services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigInfo.assemblyNames">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigInfo.AssemblyNames">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigInfo.IsLoadAutoMapperConfig">
            <summary>
            是否加载自动映射配置
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Config.AssemblyConfig.BasicAssemblyInfo">
            <summary>
            基本程序集信息
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.BasicAssemblyInfo.Names">
            <summary>
            名称集合
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Config.AssemblyConfig.BasicAssemblyInfo.interceptedTypes">
            <summary>
            拦截器类型集合
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.BasicAssemblyInfo.InterceptedTypes">
            <summary>
            拦截器类型集合
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.BasicAssemblyInfo.Intercepteds">
            <summary>
            拦截器集合
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Config.AssemblyConfig.AssemblyExpandInfo">
            <summary>
            程序集扩展参数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.AssemblyExpandInfo.Lifecycle">
            <summary>
            生命周期，默认为DEPENDENCY
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.AssemblyExpandInfo.MatchTagNames">
            <summary>
            匹配标签名称数组
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigJson">
            <summary>
            程序集配置JSON
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigJson.jsonFileName">
            <summary>
            xmlFileName
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigJson.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigJson.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonFileName">json文件名</param>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigJson.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigLocalMember">
            <summary>
            程序集配置本地内存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigLocalMember.dicCache">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigLocalMember.syncDicCache">
            <summary>
            同步字典缓存
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigLocalMember.ProtoAssemblyConfigReader">
            <summary>
            原生程序集配置读取
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigLocalMember.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigLocalMember.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigLocalMember.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigXml">
            <summary>
            程序集配置XML
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigXml.xmlFileName">
            <summary>
            xmlFileName
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigXml.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigXml.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="xmlFileName">XML文件名</param>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigXml.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigXml.ParseBasicAssembly(System.Xml.XmlNode)">
            <summary>
            解析程序集基本信息
            </summary>
            <param name="node">节点</param>
            <returns>程序集基本信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Config.AssemblyConfig.AssemblyConfigXml.ParseExpandAssembly(System.Xml.XmlNode)">
            <summary>
            解析程序集扩展信息
            </summary>
            <param name="node">节点</param>
            <returns>程序集扩展信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Config.ProgramStart.IProgramStart">
            <summary>
            程序启动接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.ProgramStart.IProgramStart.Start(System.String[])">
            <summary>
            启动
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="T:Hzdtf.Utility.Config.ProgramStart.PrgramConfigManager">
            <summary>
            程序配置管理器
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.ProgramStart.PrgramConfigManager.ProgramConfigReader">
            <summary>
            程序配置读取
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.ProgramStart.PrgramConfigManager.Start(Hzdtf.Utility.Config.ProgramStart.ProgramStartInfo[])">
            <summary>
            开始
            </summary>
            <param name="programStartInfos">程序启动信息集合</param>
        </member>
        <member name="T:Hzdtf.Utility.Config.ProgramStart.ProgramStartInfo">
            <summary>
            程序启动信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.ProgramStart.ProgramStartInfo.FullClass">
            <summary>
            全类名（如果不是本程序集，则要包含所在程序集，用,分隔）
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Config.ProgramStart.ProgramStartInfo.Args">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigJson">
            <summary>
            程序开始配置Json
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigJson.jsonFile">
            <summary>
            JSON文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigJson.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigJson.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">JSON文件</param>
        </member>
        <member name="M:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigJson.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigXml">
            <summary>
            程序开始配置XML
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigXml.xmlFile">
            <summary>
            XML文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigXml.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigXml.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="xmlFile">XML文件</param>
        </member>
        <member name="M:Hzdtf.Utility.Config.ProgramStart.ProgramStartConfigXml.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionBase`1">
            <summary>
            连接基类
            @ 黄振东
            </summary>
            <typeparam name="ConnectionInfoT">连接信息类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionBase`1.ConnectionStringParse">
            <summary>
            连接字符串解析器
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionBase`1.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Connection.ConnectionBase`1.connectionInfo">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionBase`1.ConnectionInfo">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.Open(System.String)">
            <summary>
            打开
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.Open(`0)">
            <summary>
            打开
            </summary>
            <param name="connectionModel">连接模型</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="E:Hzdtf.Utility.Connection.ConnectionBase`1.Closed">
            <summary>
            关闭后事件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.GetDefaultConnectionString">
            <summary>
            获取默认的连接字符串
            </summary>
            <returns>默认的连接字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.ExecOpen(`0)">
            <summary>
            执行打开
            </summary>
            <param name="connectionModel">连接模型</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.ExecClose">
            <summary>
            执行关闭
            </summary>
            <returns>事件数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.GetDefaultConnectionStringParse">
            <summary>
            获取默认的连接字符串解析器
            </summary>
            <returns>默认的连接字符串解析器</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.ValidateOtherOpenParams(`0)">
            <summary>
            验证其他打开参数
            </summary>
            <param name="connectionInfo">连接信息</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.InitConnectionStringParse">
            <summary>
            初始化连接字符串解析器
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.OnClosed(System.Object)">
            <summary>
            执行关闭事件
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.ValidateOpenParams(`0)">
            <summary>
            验证打开参数
            </summary>
            <param name="connectionInfo">连接信息</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionBase`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionBase">
            <summary>
            连接基类
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionConfigFactoryBase`3">
            <summary>
            连接带有配置的工厂基类
            @ 黄振东
            </summary>
            <typeparam name="ConnectionT">连接类型</typeparam>
            <typeparam name="ConnectionInfoT">连接信息类型</typeparam>
            <typeparam name="ConnectionWrapInfoT">连接包装信息类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Connection.ConnectionConfigFactoryBase`3.config">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionConfigFactoryBase`3.#ctor(Hzdtf.Utility.Safety.ISymmetricalEncryption,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造方法
            </summary>
            <param name="symmetricalEncryption">加密</param>
            <param name="config">配置</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionConfigFactoryBase`3.GetConnectionStringByConfigName(System.String)">
            <summary>
            根据配置名称获取连接字符串
            </summary>
            <param name="configName">配置名称</param>
            <returns>连接字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionFactoryBase`3">
            <summary>
            连接工厂基类
            @ 黄振东
            </summary>
            <typeparam name="ConnectionT">连接类型</typeparam>
            <typeparam name="ConnectionInfoT">连接信息类型</typeparam>
            <typeparam name="ConnectionWrapInfoT">连接包装信息类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionFactoryBase`3.Create">
            <summary>
            创建
            </summary>
            <returns>连接</returns>
        </member>
        <member name="F:Hzdtf.Utility.Connection.ConnectionFactoryBase`3.symmetricalEncryption">
            <summary>
            加密
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionFactoryBase`3.#ctor(Hzdtf.Utility.Safety.ISymmetricalEncryption)">
            <summary>
            构造方法
            </summary>
            <param name="symmetricalEncryption">加密</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionFactoryBase`3.CreateAndOpen(`2)">
            <summary>
            创建并打开
            </summary>
            <param name="connectionWrap">连接包装信息</param>
            <returns>连接</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionFactoryBase`3.GetConnectionStringByConfigName(System.String)">
            <summary>
            根据配置名称获取连接字符串
            </summary>
            <param name="configName">配置名称</param>
            <returns>连接字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionFactoryBase`3.ConfigConnectionEncryption">
            <summary>
            配置连接是否加密，默认为否
            </summary>
            <returns>配置连接是否加密</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionFactoryBase`3.NotEqualExecOpen(`0,`2)">
            <summary>
            未匹配上执行打开连接
            </summary>
            <param name="conn">连接</param>
            <param name="connectionWrap">连接包装信息</param>
            <returns>是否已打开</returns>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionFactoryBase">
            <summary>
            连接工厂基类
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionInfo">
            <summary>
            连接信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionInfo.Host">
            <summary>
            主机名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionInfo.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionInfo.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionStatusType">
            <summary>
            连接状态类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Connection.ConnectionStatusType.CLOSED">
            <summary>
            已关闭
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Connection.ConnectionStatusType.OPENED">
            <summary>
            已打开
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionStringParseBase`1">
            <summary>
            连接字符串解析器基类
            @ 黄振东
            </summary>
            <typeparam name="ConnectionInfoT">连接信息类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionStringParseBase`1.Parse(System.String)">
            <summary>
            将连接字符串解析为连接模型
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns>连接模型</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionStringParseBase`1.CreateConnectionInfo">
            <summary>
            创建连接信息
            </summary>
            <returns>连接信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionStringParseBase`1.SetOnlyHaveValue(`0,System.String,System.String)">
            <summary>
            设置独特的值
            </summary>
            <param name="connectionInfo">连接信息</param>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionStringParseBase`1.SetDefaultValue(`0)">
            <summary>
            设置默认值
            </summary>
            <param name="connectionInfo">连接信息</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionStringParseBase`1.ValidateOnlyHaveParams(`0)">
            <summary>
            验证独特的参数集合，如果不通过则抛出对应异常
            </summary>
            <param name="connectionInfo">连接信息</param>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionStringParse">
            <summary>
            连接字符串解析器
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.ConnectionStringParse.CreateConnectionInfo">
            <summary>
            创建连接信息
            </summary>
            <returns>连接信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionWrapInfo`1">
            <summary>
            连接包装信息
            优先级顺序：DefaultConnection>ConnectionInfo>ConnectionString>ConnectionStringAppConfigName
            @ 黄振东
            </summary>
            <typeparam name="ConnectionInfoT">连接信息类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionWrapInfo`1.ConnectionInfo">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionWrapInfo`1.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionWrapInfo`1.ConnectionStringAppConfigName">
            <summary>
            连接字符串应用配置名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.ConnectionWrapInfo`1.DefaultConnection">
            <summary>
            默认连接对象
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.ConnectionWrapInfo">
            <summary>
            连接包装信息
            优先级顺序：DefaultConnection>ConnectionInfo>ConnectionString>ConnectionStringAppConfigName
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.IConnection`1">
            <summary>
            连接接口
            @ 黄振东
            </summary>
            <typeparam name="ConnectionInfoT">连接信息类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Connection.IConnection`1.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Connection.IConnection`1.ConnectionInfo">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.IConnection`1.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Connection.IConnection`1.Open(System.String)">
            <summary>
            打开
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:Hzdtf.Utility.Connection.IConnection`1.Open(`0)">
            <summary>
            打开
            </summary>
            <param name="connectionInfo">连接信息</param>
        </member>
        <member name="T:Hzdtf.Utility.Connection.IConnection">
            <summary>
            连接接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.IConnectionFactory`3">
            <summary>
            连接工厂接口
            @ 黄振东
            </summary>
            <typeparam name="ConnectionT">连接类型</typeparam>
            <typeparam name="ConnectionInfoT">连接信息类型</typeparam>
            <typeparam name="ConnectionWrapInfoT">连接包装信息类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Connection.IConnectionFactory`3.Create">
            <summary>
            创建
            </summary>
            <returns>连接</returns>
        </member>
        <member name="M:Hzdtf.Utility.Connection.IConnectionFactory`3.CreateAndOpen(`2)">
            <summary>
            创建并打开
            </summary>
            <param name="connectionWrap">连接包装信息</param>
            <returns>连接</returns>
        </member>
        <member name="T:Hzdtf.Utility.Connection.IConnectionFactory">
            <summary>
            连接工厂接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Connection.IConnectionStringParse`1">
            <summary>
            连接字符串解析接口
            @ 黄振东
            </summary>
            <typeparam name="ConnectionInfoT">连接信息类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Connection.IConnectionStringParse`1.Parse(System.String)">
            <summary>
            将连接字符串解析为连接模型
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns>连接信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Connection.IConnectionStringParse">
            <summary>
            连接字符串解析接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.ReverConversion.BoolTextReverConvert">
            <summary>
            布尔文本反转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.ReverConversion.BoolTextReverConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.ReverConversion.SexTextReverConvert">
            <summary>
            性别文本反转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.ReverConversion.SexTextReverConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.BoolValueToTextConvert">
            <summary>
            布尔值到文本转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.BoolValueToTextConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.BoolTextToValueConvert">
            <summary>
            布尔文本到值转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.BoolTextToValueConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.ConvertBase">
            <summary>
            转换基类 
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.ConvertBase.To(System.Object)">
            <summary>
            转换
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.ConvertBase.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.ConvertTypeValueBase">
            <summary>
            转换类型值基类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.ConvertTypeValueBase.To(System.Object,System.Type)">
            <summary>
            转换
            </summary>
            <param name="value">值</param>
            <param name="targetType">目标类型</param>
            <returns>新值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.ConvertTypeValueBase.ToNew(System.Object,System.Type)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <param name="targetType">目标类型</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.DateValueToTextConvert">
            <summary>
            日期值到文本转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.DateValueToTextConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.DateTextToValueConvert">
            <summary>
            日期文本到值转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.DateTextToValueConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.DateTimeValueToTextConvert">
            <summary>
            日期时间值到文本转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.DateTimeValueToTextConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.DateTimeTextToValueConvert">
            <summary>
            日期时间文本到值转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.DateTimeTextToValueConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.FenToYuanConvert">
            <summary>
            分到元转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.FenToYuanConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.GenderValueToTextConvert">
            <summary>
            性别值到文本转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.GenderValueToTextConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.GenderTextToValueConvert">
            <summary>
            性别文本到值转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.GenderTextToValueConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.IConvertable">
            <summary>
            可转换接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.IConvertable.To(System.Object)">
            <summary>
            转换
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.IConvertTypeValue">
            <summary>
            转换类型值接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.IConvertTypeValue.To(System.Object,System.Type)">
            <summary>
            转换
            </summary>
            <param name="value">值</param>
            <param name="targetType">目标类型</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.JsonConvertTypeValue">
            <summary>
            JSON转换类型值
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.JsonConvertTypeValue.ToNew(System.Object,System.Type)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <param name="targetType">目标类型</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.MessagePackConvertTypeValue">
            <summary>
            消息包转换类型值
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.MessagePackConvertTypeValue.ToNew(System.Object,System.Type)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <param name="targetType">目标类型</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.YMValueToTextConvert">
            <summary>
            年月值到文本转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.YMValueToTextConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Conversion.YMTextToValueConvert">
            <summary>
            年月文本到值转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Conversion.YMTextToValueConvert.ToNew(System.Object)">
            <summary>
            转换新值
            </summary>
            <param name="value">值</param>
            <returns>新值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.Config.FileConfigurationBase`1">
            <summary>
            文件配置基类
            @ 黄振东
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Data.Config.FileConfigurationBase`1.file">
            <summary>
            文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.FileConfigurationBase`1.#ctor(System.String,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="file">文件</param>
            <param name="isExecWrite">是否执行写入</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.FileConfigurationBase`1.#ctor(`0,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="data">数据</param>
            <param name="isExecWrite">是否执行写入</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.FileConfigurationBase`1.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.FileConfigurationBase`1.Write(`0)">
            <summary>
            写入
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.FileConfigurationBase`1.InitFile(System.String)">
            <summary>
            初始化文件
            </summary>
            <param name="file">文件</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.FileConfigurationBase`1.WriteToStorage(`0)">
            <summary>
            写入到存储里
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.FileConfigurationBase`1.ConvertFromFile(System.String)">
            <summary>
            从文件里转换为数据
            </summary>
            <param name="file">文件</param>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.Config.IConfigurationData`1">
            <summary>
            配置数据接口
            @ 黄振东
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="T:Hzdtf.Utility.Data.Config.JsonFileConfigurationBase`1">
            <summary>
            Json文件配置基类
            @ 黄振东
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.JsonFileConfigurationBase`1.#ctor(System.String,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="file">文件</param>
            <param name="isExecWrite">是否执行写入</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.JsonFileConfigurationBase`1.#ctor(`0,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="data">数据</param>
            <param name="isExecWrite">是否执行写入</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Config.JsonFileConfigurationBase`1.ConvertFromFile(System.String)">
            <summary>
            从文件里转换为数据
            </summary>
            <param name="file">文件</param>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.DataHandler">
            <summary>
            数据处理委托
            @ 黄振东
            </summary>
            <param name="o">引发对象</param>
            <param name="e">数据事件参数</param>
        </member>
        <member name="T:Hzdtf.Utility.Data.DataEventArgs">
            <summary>
            数据事件参数
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Data.DataEventArgs.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Data.DataEventArgs.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.DataEventArgs.#ctor(System.Object)">
            <summary>
            构造方法
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Hzdtf.Utility.Data.Dic.DictionaryJson">
            <summary>
            字典Json
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Data.Dic.DictionaryJson.jsonFile">
            <summary>
            Json文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.Dic.DictionaryJson.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">Json文件</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Dic.DictionaryJson.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.Dic.DictionaryXml">
            <summary>
            字典XML
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Data.Dic.DictionaryXml.xmlFile">
            <summary>
            XML文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.Dic.DictionaryXml.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="xmlFile">XML文件</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.Dic.DictionaryXml.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IBytesSerialization">
            <summary>
            字节数组序列化接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.IBytesSerialization.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns>序列化后的数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.IBytesSerialization.Deserialize``1(System.Byte[])">
            <summary>
            将字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="data">数据</param>
            <returns>对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.IBytesSerialization.Deserialize(System.Byte[],System.Type)">
            <summary>
            将字符串反序列化为对象
            </summary>
            <param name="data">数据</param>
            <param name="type">类型</param>
            <returns>对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IDeserialize">
            <summary>
            反序列化接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.IDeserialize.Deserialize``1(System.String)">
            <summary>
            将字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="str">字符串</param>
            <returns>对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IGetable`2">
            <summary>
            可获取接口
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Data.IGetable`2.Get(`0)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IGetObject`1">
            <summary>
            获取对象接口
            @ 黄振东
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Data.IGetObject`1.Get">
            <summary>
            获取对象
            </summary>
            <returns>对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IInstance">
            <summary>
            实例接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.IInstance.CreateInstance(System.String)">
            <summary>
            创建实例
            </summary>
            <param name="classFullPath">类全路径</param>
            <returns>实例</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.IInstance.CreateInstance``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="classFullPath">类全路径</param>
            <returns>实例</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IObjectSerialization">
            <summary>
            对象序列化接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.IObjectSerialization.SerializeToObject(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns>序列化后的数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.IObjectSerialization.DeserializeToObject(System.Object)">
            <summary>
            将对象反序列化为对象
            </summary>
            <param name="obj">对象</param>
            <returns>对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.IObjectSerialization.DeserializeToObject(System.Object,System.Type)">
            <summary>
            将对象反序列化为对象
            </summary>
            <param name="obj">对象</param>
            <param name="type">类型</param>
            <returns>对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IReader`1">
            <summary>
            读取接口
            @ 黄振东
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Data.IReader`1.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IReaderAll`1">
            <summary>
            读取全部接口
            @ 黄振东
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Data.IReaderAll`1.ReaderAll">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.IReaderDic`2">
            <summary>
            读取字典接口
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Data.IReaderDic`2.Reader(`0)">
            <summary>
            读取
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.ISerialization">
            <summary>
            序列化接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.ISerialization.Serialize(System.Object)">
            <summary>
            将对象序列化为字符串
            </summary>
            <param name="obj">对象</param>
            <returns>字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.ISetObject`1">
            <summary>
            设置对象接口
            @ 黄振东
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Data.ISetObject`1.Set(`0)">
            <summary>
            设置对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="T:Hzdtf.Utility.Data.IWrite`1">
            <summary>
            写入接口
            @ 黄振东
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Data.IWrite`1.Write(`0)">
            <summary>
            写入
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:Hzdtf.Utility.Data.JsonBytesSerialization">
            <summary>
            JSON字节数组序列化
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.JsonBytesSerialization.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns>序列化后的数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.JsonBytesSerialization.Deserialize``1(System.Byte[])">
            <summary>
            将字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="data">数据</param>
            <returns>对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.JsonBytesSerialization.Deserialize(System.Byte[],System.Type)">
            <summary>
            将字符串反序列化为对象
            </summary>
            <param name="data">数据</param>
            <param name="type">类型</param>
            <returns>对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.JsonConvert">
            <summary>
            JSON转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.JsonConvert.Serialize(System.Object)">
            <summary>
            将对象序列化为字符串
            </summary>
            <param name="obj">对象</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.JsonConvert.Deserialize``1(System.String)">
            <summary>
            将字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="str">字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.JsonConvert.SerializeToObject(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns>序列化后的数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.JsonConvert.DeserializeToObject(System.Object)">
            <summary>
            将对象反序列化为对象
            </summary>
            <param name="obj">对象</param>
            <returns>对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.JsonConvert.DeserializeToObject(System.Object,System.Type)">
            <summary>
            将对象反序列化为对象
            </summary>
            <param name="obj">对象</param>
            <param name="type">类型</param>
            <returns>对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.MessagePackBytesSerialization">
            <summary>
            消息包字节数组序列化
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Data.MessagePackBytesSerialization.IsSetDateTimeToLocalTime">
            <summary>
            是否设置日期时间为本地时间，默认为否
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Data.MessagePackBytesSerialization.ToLocalTimeDepth">
            <summary>
            转换为本地时间深度，默认为3
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.MessagePackBytesSerialization.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns>序列化后的数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.MessagePackBytesSerialization.Deserialize``1(System.Byte[])">
            <summary>
            反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="data">数据</param>
            <returns>对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.MessagePackBytesSerialization.Deserialize(System.Byte[],System.Type)">
            <summary>
            反序列化为对象
            </summary>
            <param name="data">数据</param>
            <param name="type">类型</param>
            <returns>对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.ReflectInstance">
            <summary>
            反射实例
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.ReflectInstance.CreateInstance(System.String)">
            <summary>
            创建实例
            </summary>
            <param name="classFullPath">类全路径</param>
            <returns>实例</returns>
        </member>
        <member name="M:Hzdtf.Utility.Data.ReflectInstance.CreateInstance``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="classFullPath">类全路径</param>
            <returns>实例</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.StringArray.StringArrayJson">
            <summary>
            字节串数组JSON
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Data.StringArray.StringArrayJson.jsonFile">
            <summary>
            Json文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.StringArray.StringArrayJson.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">Json文件</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.StringArray.StringArrayJson.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Data.StringArray.StringArrayXml">
            <summary>
            字节串数组Xml
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Data.StringArray.StringArrayXml.xmlFile">
            <summary>
            XML文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Data.StringArray.StringArrayXml.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="xmlFile">XML文件</param>
        </member>
        <member name="M:Hzdtf.Utility.Data.StringArray.StringArrayXml.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Enums.AccessMode">
            <summary>
            访问模式
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.AccessMode.MASTER">
            <summary>
            主
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.AccessMode.SLAVE">
            <summary>
            从
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.BooleanType">
            <summary>
            布尔类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.BooleanType.FALSE">
            <summary>
            否
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.BooleanType.TRUE">
            <summary>
            是
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.BooleanType.DEFAULT">
            <summary>
            默认
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.CommunicationMode">
            <summary>
            通讯方式
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.CommunicationMode.NONE">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.CommunicationMode.HTTP">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.CommunicationMode.GRPC">
            <summary>
            GRPC
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.ContentFormatType">
            <summary>
            内容格式类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.ContentFormatType.TEXT">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.ContentFormatType.PICTURE">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.ContentFormatType.VIDEO">
            <summary>
            视频
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.ContentFormatType.AUDIO">
            <summary>
            音频
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.ContentFormatType.OTHER_FILE">
            <summary>
            其它文件
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.ContentFormatType.OTHER">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.DataContentType">
            <summary>
            数据内容类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.DataContentType.TEXT">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.DataContentType.HTML">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.DataContentType.JSON">
            <summary>
            JSON
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.DataContentType.XML">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.DataContentType.BYTES">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.DataContentType.OTHER">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.EnvironmentType">
            <summary>
            环境类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.EnvironmentType.TEST">
            <summary>
            测试
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.EnvironmentType.PRODUCTION">
            <summary>
            生产
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.IdentityAuthType">
            <summary>
            身份认证类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.IdentityAuthType.COOKIES">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.IdentityAuthType.JWT">
            <summary>
            Jwt
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.IdentityAuthType.JWT_COOKIE">
            <summary>
            Jwt_Cookie存储
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.IdentityAuthType.JWT_COOKIE_HEADER">
            <summary>
             Jwt_Cookie存储，验证时，先从Cookie取，取不到再从Header取
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.LifecycleType">
            <summary>
            生命周期类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.LifecycleType.DEPENDENCY">
            <summary>
            每次都生成一个实例
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.LifecycleType.LIFETIME_SCOPE">
            <summary>
            在某个范围内共享实例
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.LifecycleType.MATCH_LIFETIME_SCOPE">
            <summary>
            在指定标签且在子域范围内共享实例
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.LifecycleType.REQUEST">
            <summary>
            每次请求范围内共享实例
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.LifecycleType.SIGNLETON">
            <summary>
            在全局范围内共享实例
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.LikeMode">
            <summary>
            Like模式
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.LikeMode.LEFT_EQUAL">
            <summary>
            左匹配。相当于like '{value}%'
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.LikeMode.RIGHT">
            <summary>
            右匹配。相当于like '%{value}'
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.LikeMode.FULL_BLUR">
            <summary>
            全模糊，相当于like '%{value}%'
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Enums.SortType">
            <summary>
            排序类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.SortType.ASC">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Enums.SortType.DESC">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Event.AppEventBus">
            <summary>
            应用事件总线
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Event.AppEventBus.HandlerData">
            <summary>
            处理数据
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Event.AppEventBus.HandlerData.handler">
            <summary>
            处理
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Event.AppEventBus.HandlerData.Hanler">
            <summary>
            处理
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Event.AppEventBus.HandlerData.handlerObj">
            <summary>
            处理对象
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Event.AppEventBus.HandlerData.HanlerObj">
            <summary>
            处理对象
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Event.AppEventBus.HandlerData.#ctor(System.Type)">
            <summary>
            构造方法
            </summary>
            <param name="handler">处理</param>
        </member>
        <member name="F:Hzdtf.Utility.Event.AppEventBus.dicSourceMapHandler">
            <summary>
            事件源映射事件处理的字典
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Event.AppEventBus.syncDicSourceMapHandler">
            <summary>
            同步事件源映射事件处理的字典
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Event.AppEventBus.INSTANCE">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Event.AppEventBus.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Event.AppEventBus.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Event.AppEventBus.Bind(System.Type,System.Type)">
            <summary>
            绑定事件源与事件处理的关系
            </summary>
            <param name="eventSourceType">事件源类型</param>
            <param name="eventHandlerType">事件处理类型</param>
        </member>
        <member name="M:Hzdtf.Utility.Event.AppEventBus.UnBind(System.Type,System.Type)">
            <summary>
            解绑事件源与事件处理的关系
            </summary>
            <param name="eventSourceType">事件源类型</param>
            <param name="eventHandlerType">事件处理类型</param>
        </member>
        <member name="M:Hzdtf.Utility.Event.AppEventBus.Publish(System.Type,Hzdtf.Utility.Event.EventData,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            发布事件
            </summary>
            <param name="eventSourceType">事件源类型</param>
            <param name="eventData">事件数据</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
        </member>
        <member name="M:Hzdtf.Utility.Event.AppEventBus.IsExistsHandlerData(System.Collections.Generic.IList{Hzdtf.Utility.Event.AppEventBus.HandlerData},System.Type)">
            <summary>
            根据事件处理判断是否存在列表里
            </summary>
            <param name="handlerDatas">处理数据列表</param>
            <param name="eventHandler">事件处理</param>
            <returns>事件处理判断是否存在列表里</returns>
        </member>
        <member name="M:Hzdtf.Utility.Event.AppEventBus.FindHandlerData(System.Collections.Generic.IList{Hzdtf.Utility.Event.AppEventBus.HandlerData},System.Type,System.Boolean@)">
            <summary>
            从处理数据列表里查找处理数据
            </summary>
            <param name="handlerDatas">处理数据列表</param>
            <param name="eventHandler">事件处理</param>
            <param name="isGeted">是否获取到</param>
            <returns>处理数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Event.EventData">
            <summary>
            事件数据
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Event.EventData.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Event.EventData.Source">
            <summary>
            源
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Event.EventData.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Event.IEventBus">
            <summary>
            事件总线接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Event.IEventBus.Bind(System.Type,System.Type)">
            <summary>
            绑定事件源与事件处理的关系
            </summary>
            <param name="eventSourceType">事件源类型</param>
            <param name="eventHandlerType">事件处理类型</param>
        </member>
        <member name="M:Hzdtf.Utility.Event.IEventBus.UnBind(System.Type,System.Type)">
            <summary>
            解绑事件源与事件处理的关系
            </summary>
            <param name="eventSourceType">事件源类型</param>
            <param name="eventHandlerType">事件处理类型</param>
        </member>
        <member name="M:Hzdtf.Utility.Event.IEventBus.Publish(System.Type,Hzdtf.Utility.Event.EventData,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            发布事件
            </summary>
            <param name="eventSourceType">事件源类型</param>
            <param name="eventData">事件数据</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
        </member>
        <member name="T:Hzdtf.Utility.Event.IEventHandler">
            <summary>
            事件处理接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Event.IEventHandler.Execute(Hzdtf.Utility.Event.EventData,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            执行
            </summary>
            <param name="eventData">事件数据</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
        </member>
        <member name="T:Hzdtf.Utility.Event.IInfoEvent">
            <summary>
            信息事件接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Event.IInfoEvent.RecordAsync(System.String,System.Exception,System.String,System.String,System.String[])">
            <summary>
            异步记录
            </summary>
            <param name="msg">消息</param>
            <param name="ex">异常</param>
            <param name="source">来源</param>
            <param name="eventId">事件ID</param>
            <param name="tags">标签</param>
            <returns>任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.Extensions.ChannelCustomerOptions">
            <summary>
            渠道自定义选项配置
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Extensions.ChannelCustomerOptions.IsAddToken">
            <summary>
            是否添加Token，设置后，会调用App.GetTokenFunc获取Token
            默认为是
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Extensions.ChannelCustomerOptions.GetTokenFunc">
            <summary>
            获取Token回调
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Extensions.ChannelCustomerOptions.IsAddEventId">
            <summary>
            是否添加事件ID，设置后，会调用App.GetEventIdFunc获取事件ID
            默认为是
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Extensions.ChannelCustomerOptions.ComData">
            <summary>
            通用数据
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Extensions.ChannelCustomerOptions.Api">
            <summary>
            接口
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Extensions.ChannelCustomerOptionsExtensions">
            <summary>
            渠道自定义选项扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Extensions.ChannelCustomerOptionsExtensions.GetToken(Hzdtf.Utility.Extensions.ChannelCustomerOptions)">
            <summary>
            获取token
            </summary>
            <param name="cusOptions">渠道自定义选项</param>
            <returns>token</returns>
        </member>
        <member name="M:Hzdtf.Utility.Extensions.ChannelCustomerOptionsExtensions.GetEventId(Hzdtf.Utility.Extensions.ChannelCustomerOptions)">
            <summary>
            获取事件ID
            </summary>
            <param name="cusOptions">渠道自定义选项</param>
            <returns>事件ID</returns>
        </member>
        <member name="T:Hzdtf.Utility.Factory.IGeneralFactory`1">
            <summary>
            普通工厂接口
            @ 黄振东
            </summary>
            <typeparam name="ProductT">产品类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Factory.IGeneralFactory`1.Create">
            <summary>
            创建
            </summary>
            <returns>产品</returns>
        </member>
        <member name="T:Hzdtf.Utility.Factory.ISimpleFactory`2">
            <summary>
            简单工厂接口
            @ 黄振东
            </summary>
            <typeparam name="TypeT">类型</typeparam>
            <typeparam name="ProductT">产品类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Factory.ISimpleFactory`2.Create(`0)">
            <summary>
            创建
            </summary>
            <param name="type">类型</param>
            <returns>产品</returns>
        </member>
        <member name="T:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache">
            <summary>
            GRpc渠道策略缓存
            key：服务名
            value：地址映射渠道字典（key：地址，value：渠道）
            缓存是以静态变量存储
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.dicCache">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.syncDicCache">
            <summary>
            同步字典缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.servicesBuilder">
            <summary>
            服务生成器
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.nativeServiceProvider">
            <summary>
            原生服务提供者
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.#ctor(Hzdtf.Utility.RemoteService.Builder.IUnityServicesBuilder,Hzdtf.Utility.RemoteService.Provider.INativeServicesProvider)">
            <summary>
            构造方法
            </summary>
            <param name="servicesBuilder">服务生成器</param>
            <param name="nativeServiceProvider">原生服务提供者</param>
        </member>
        <member name="M:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.BuilderAsync(System.String,Grpc.Net.Client.GrpcChannelOptions)">
            <summary>
            异步生成渠道
            </summary>
            <param name="serviceName">服务名</param>
            <param name="options">grpc渠道配置</param>
            <returns>生成地址任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.UpdateExistsesAddress(System.String,System.String[])">
            <summary>
            更新存在的地址，如果缓存里的地址在新的地址不存在，则移除
            </summary>
            <param name="serviceName">服务名称</param>
            <param name="newAddresses">新的地址数组</param>
        </member>
        <member name="M:Hzdtf.Utility.GRpcStrategy.GRpcChannelStrategyCache.DisposeAsync">
            <summary>
            异步释放资源
            </summary>
            <returns>任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.GRpcStrategy.IGRpcChannel">
            <summary>
            GRpc渠道接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.GRpcStrategy.IGRpcChannel.BuilderAsync(System.String,Grpc.Net.Client.GrpcChannelOptions)">
            <summary>
            异步生成渠道
            </summary>
            <param name="serviceName">服务名</param>
            <param name="options">grpc渠道配置</param>
            <returns>生成地址任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.GRpc.GRpcServiceAddCache">
            <summary>
            GRpc服务地址缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.GRpc.GRpcServiceAddCache.dicCaches">
            <summary>
            缓存键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.GRpc.GRpcServiceAddCache.syncDicCaches">
            <summary>
            同步缓存键
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.GRpc.GRpcServiceAddCache.#ctor(Hzdtf.Utility.HostConfig.IHostConfigReader)">
            <summary>
            构造方法
            </summary>
            <param name="hostConfigReader">主机配置读取，如果为空，默认为HostConfigJsonFile</param>
        </member>
        <member name="M:Hzdtf.Utility.GRpc.GRpcServiceAddCache.Reader(System.String)">
            <summary>
            读取
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.GRpc.GRpcServiceAddCache.GetCache">
            <summary>
            获取缓存对象
            </summary>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.GRpc.GRpcServiceAddCache.GetSyncCache">
            <summary>
            获取同步缓存对象
            </summary>
            <returns>同步缓存对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.GRpc.IGRpcServiceAddReader">
            <summary>
            GRpc服务地址读取接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.HostConfig.HostConfigJsonFile">
            <summary>
            主机配置JSON文件
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.HostConfig.HostConfigJsonFile.jsonFile">
            <summary>
            json文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.HostConfig.HostConfigJsonFile.#ctor">
            <summary>
            构造方法
            默认读取AmqpConfigFile配置，如果没有，则读取当前目录的host.json
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.HostConfig.HostConfigJsonFile.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">配置JSON文件</param>
        </member>
        <member name="M:Hzdtf.Utility.HostConfig.HostConfigJsonFile.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.HostConfig.IHostConfigReader">
            <summary>
            主机配置读取接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.InterfaceImpl.IInterfaceMapImpl">
            <summary>
            接口映射实现类的接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.InterfaceImpl.InterfaceMapImplCache">
            <summary>
            接口映射实现类缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.InterfaceImpl.InterfaceMapImplCache.dicCaches">
            <summary>
            缓存键，接口名映射实现类名
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.InterfaceImpl.InterfaceMapImplCache.syncDicCaches">
            <summary>
            同步缓存键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.InterfaceImpl.InterfaceMapImplCache.readerConfig">
            <summary>
            读取配置
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.InterfaceImpl.InterfaceMapImplCache.Reader(System.String)">
            <summary>
            读取
            </summary>
            <param name="key">键，接口全路径，包含接口的程序集名，比如：Hzdtf.Contract,Hzdtf.Contract.ITestable</param>
            <returns>值，接口对应的实现类名，比如：Hzdtf.Impl,Hzdtf.Impl.Test</returns>
        </member>
        <member name="M:Hzdtf.Utility.InterfaceImpl.InterfaceMapImplCache.Set(Hzdtf.Utility.Data.IReader{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            设置对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Hzdtf.Utility.InterfaceImpl.InterfaceMapImplCache.GetCache">
            <summary>
            获取缓存对象
            </summary>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.InterfaceImpl.InterfaceMapImplCache.GetSyncCache">
            <summary>
            获取同步缓存对象
            </summary>
            <returns>同步缓存对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Json.DateTimeLocalJsonConvert">
            <summary>
            日期时间本地Json转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Json.DateTimeLocalJsonConvert.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取日期时间
            </summary>
            <param name="reader">读取</param>
            <param name="typeToConvert">类型转换</param>
            <param name="options">JSON配置选项</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:Hzdtf.Utility.Json.DateTimeLocalJsonConvert.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入日期时间
            </summary>
            <param name="writer">写入</param>
            <param name="value">值</param>
            <param name="options">JSON配置选项</param>
        </member>
        <member name="T:Hzdtf.Utility.Json.DateTimeNullLocalJsonConvert">
            <summary>
            日期时间Null本地Json转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Json.DateTimeNullLocalJsonConvert.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取日期时间
            </summary>
            <param name="reader">读取</param>
            <param name="typeToConvert">类型转换</param>
            <param name="options">JSON配置选项</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:Hzdtf.Utility.Json.DateTimeNullLocalJsonConvert.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateTime},System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入日期时间
            </summary>
            <param name="writer">写入</param>
            <param name="value">值</param>
            <param name="options">JSON配置选项</param>
        </member>
        <member name="T:Hzdtf.Utility.LoadBalance.HashIpPortLoadBalance">
            <summary>
            哈希IP+端口负载均衡
            如果要加上端口，则在静态属性里设置GetPort
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.LoadBalance.HashIpPortLoadBalance.Hash">
            <summary>
            哈希，默认是MD5哈希算法
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.LoadBalance.HashIpPortLoadBalance.GetPort">
            <summary>
            获取端口方法
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.HashIpPortLoadBalance.syncLocalHashCode">
            <summary>
            同步本地哈希值
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.HashIpPortLoadBalance.localHashCode">
            <summary>
            本地哈希值
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.LoadBalance.HashIpPortLoadBalance.LocalHashCode">
            <summary>
            本地哈希值
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.LoadBalance.HashIpPortLoadBalance.GetIndex(System.String[])">
            <summary>
            获取索引
            </summary>
            <param name="array">数组</param>
            <returns>索引</returns>
        </member>
        <member name="T:Hzdtf.Utility.LoadBalance.ILoadBalance">
            <summary>
            负载均衡接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.LoadBalance.ILoadBalance.Resolve(System.String[])">
            <summary>
            解析
            </summary>
            <param name="array">数组</param>
            <returns>元素</returns>
        </member>
        <member name="T:Hzdtf.Utility.LoadBalance.LoadBalanceBase">
            <summary>
            负载均衡基类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.LoadBalance.LoadBalanceBase.Resolve(System.String[])">
            <summary>
            解析
            </summary>
            <param name="array">数组</param>
            <returns>元素</returns>
        </member>
        <member name="M:Hzdtf.Utility.LoadBalance.LoadBalanceBase.GetIndex(System.String[])">
            <summary>
            获取索引
            </summary>
            <param name="array">数组</param>
            <returns>索引</returns>
        </member>
        <member name="T:Hzdtf.Utility.LoadBalance.LoadBalanceSimpleFactory">
            <summary>
            负载均衡简单工厂
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.LoadBalance.LoadBalanceSimpleFactory.Create(Hzdtf.Utility.LoadBalance.LoadBalanceMode)">
            <summary>
            创建
            </summary>
            <param name="mode">负载均衡模式</param>
            <returns>负载均衡</returns>
        </member>
        <member name="M:Hzdtf.Utility.LoadBalance.LoadBalanceSimpleFactory.Create(System.String)">
            <summary>
            创建
            </summary>
            <param name="mode">负载均衡模式</param>
            <returns>负载均衡</returns>
        </member>
        <member name="T:Hzdtf.Utility.LoadBalance.LoadBalanceType">
            <summary>
            负载均衡类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.LoadBalanceType.Random">
            <summary>
            随机
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.LoadBalanceType.RoundRobin">
            <summary>
            轮询
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.LoadBalanceType.HashIpPort">
            <summary>
            哈希IP+端口
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.LoadBalance.LoadBalanceMode">
            <summary>
            负载均衡模式
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.LoadBalanceMode.RANDOM">
            <summary>
            随机
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.LoadBalanceMode.ROUND_ROBIN">
            <summary>
            轮询
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.LoadBalanceMode.HASH_IP_PORT">
            <summary>
            哈希IP+端口
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.LoadBalanceMode.OTHER">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.LoadBalance.RandomLoadBalance">
            <summary>
            随机负载均衡
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.RandomLoadBalance.random">
            <summary>
            随机
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.LoadBalance.RandomLoadBalance.GetIndex(System.String[])">
            <summary>
            获取索引
            </summary>
            <param name="array">数组</param>
            <returns>索引</returns>
        </member>
        <member name="T:Hzdtf.Utility.LoadBalance.RoundRobinLoadBalance">
            <summary>
            轮询负载均衡
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.RoundRobinLoadBalance.index">
            <summary>
            索引
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.LoadBalance.RoundRobinLoadBalance.syncObject">
            <summary>
            同步对象
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.LoadBalance.RoundRobinLoadBalance.GetIndex(System.String[])">
            <summary>
            获取索引
            </summary>
            <param name="array">数组</param>
            <returns>索引</returns>
        </member>
        <member name="T:Hzdtf.Utility.Localization.CultureDefine">
            <summary>
            文化定义
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Localization.CultureDefine.zh_CN">
            <summary>
            简体中文
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Localization.CultureDefine.zh_TW">
            <summary>
            繁体中文
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Localization.CultureDefine.en_US">
            <summary>
            英文
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Localization.CultureLibraryCache">
            <summary>
            文化库缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Localization.CultureLibraryCache.dicCache">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Localization.CultureLibraryCache.syncDicCache">
            <summary>
            同步字典缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Localization.CultureLibraryCache.protoCultureLibrary">
            <summary>
            原生文化库读取
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Localization.CultureLibraryCache.Get(System.String)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Localization.CultureLibraryCache.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.Localization.CultureLibraryCache.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Localization.CultureLibraryCache.Set(Hzdtf.Utility.Localization.ICultureLibrary)">
            <summary>
            设置对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Hzdtf.Utility.Localization.CultureLibraryCache.Get(System.String[])">
            <summary>
            根据键数组获取值字典
            </summary>
            <param name="keys">键数组</param>
            <returns>值字典</returns>
        </member>
        <member name="T:Hzdtf.Utility.Localization.ICultureLibrary">
            <summary>
            文化库接口
            key：键
            value： { key：文化名称，value：文化对应的值 }
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Localization.ICultureLibrary.Get(System.String[])">
            <summary>
            根据键数组获取值字典
            </summary>
            <param name="keys">键数组</param>
            <returns>值字典</returns>
        </member>
        <member name="T:Hzdtf.Utility.Localization.ILocalization">
            <summary>
            本地化接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Localization.ILocalization.Get(System.String,System.String)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Localization.ILocalization.Get(System.String,System.String,System.String)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <param name="culture">文化</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Localization.ILocalization.Get(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            根据键字典获取值字典
            </summary>
            <param name="keyDefaultValues">键字典，key：键，value：默认值</param>
            <param name="culture">文化</param>
            <returns>值字典</returns>
        </member>
        <member name="T:Hzdtf.Utility.Localization.LocalizationImpl">
            <summary>
            本地化实现
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Localization.LocalizationImpl.CultureLibrary">
            <summary>
            文化库
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Localization.LocalizationImpl.Get(System.String,System.String)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Localization.LocalizationImpl.Get(System.String,System.String,System.String)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <param name="culture">文化</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Localization.LocalizationImpl.Get(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            根据键字典获取值字典
            </summary>
            <param name="keyDefaultValues">键字典，key：键，value：默认值</param>
            <param name="culture">文化</param>
            <returns>值字典</returns>
        </member>
        <member name="M:Hzdtf.Utility.Localization.LocalizationImpl.GetCurrCulture">
            <summary>
            获取当前文化
            </summary>
            <returns>当前文化</returns>
        </member>
        <member name="T:Hzdtf.Utility.Localization.LocalizationUtil">
            <summary>
            本地化辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Localization.LocalizationUtil.SetCurrentCulture(System.String)">
            <summary>
            设置当前语言文化
            </summary>
            <param name="culture">文化</param>
        </member>
        <member name="M:Hzdtf.Utility.Localization.LocalizationUtil.GetCurrentCulture">
            <summary>
            获取当前语言文化
            </summary>
            <returns>文化</returns>
        </member>
        <member name="T:Hzdtf.Utility.Memorandum.CareTaker`1">
            <summary>
            守护者
            </summary>
            <typeparam name="StateT">状态类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Memorandum.CareTaker`1.dicMementos">
            <summary>
            备忘录字典
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.CareTaker`1.Add(System.String,Hzdtf.Utility.Memorandum.IMemento{`0})">
            <summary>
            添加备忘录
            </summary>
            <param name="key">键</param>
            <param name="memento">备忘录</param>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.CareTaker`1.Get(System.String)">
            <summary>
            获取备忘录
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.CareTaker`1.Remove(System.String)">
            <summary>
            移除备忘录
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:Hzdtf.Utility.Memorandum.ICareTaker`1">
            <summary>
            守护者接口
            </summary>
            <typeparam name="StateT">状态类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.ICareTaker`1.Add(System.String,Hzdtf.Utility.Memorandum.IMemento{`0})">
            <summary>
            添加备忘录
            </summary>
            <param name="key">键</param>
            <param name="memento">备忘录</param>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.ICareTaker`1.Get(System.String)">
            <summary>
            获取备忘录
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.ICareTaker`1.Remove(System.String)">
            <summary>
            移除备忘录
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:Hzdtf.Utility.Memorandum.IMemento`1">
            <summary>
            备注录存储接口
            @ 黄振东
            </summary>
            <typeparam name="StateT">状态类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.IMemento`1.GetState">
            <summary>
            获取状态
            </summary>
            <returns>状态</returns>
        </member>
        <member name="T:Hzdtf.Utility.Memorandum.IOriginator`1">
            <summary>
            发起者接口
            @ 黄振东
            </summary>
            <typeparam name="StateT">状态类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.IOriginator`1.SaveStateToMemento">
            <summary>
            保存状态到备忘录
            </summary>
            <returns>备忘录</returns>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.IOriginator`1.RestoreStateFromMemento(Hzdtf.Utility.Memorandum.IMemento{`0})">
            <summary>
            从备忘录里还原状态
            </summary>
            <param name="memento">备忘录</param>
        </member>
        <member name="T:Hzdtf.Utility.Memorandum.Memento`1">
            <summary>
            备注录存储
            @ 黄振东
            </summary>
            <typeparam name="StateT">状态类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Memorandum.Memento`1.state">
            <summary>
            状态
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.Memento`1.#ctor(`0)">
            <summary>
            构造方法
            </summary>
            <param name="state">状态</param>
        </member>
        <member name="M:Hzdtf.Utility.Memorandum.Memento`1.GetState">
            <summary>
            获取状态
            </summary>
            <returns>状态</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.BasicPermissionInfo">
            <summary>
            基本权限信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicPermissionInfo.HaveFunctionCodes">
            <summary>
            拥有的功能编码列表
            默认已初始化列表
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.BasicUserInfo`1">
            <summary>
            基本用户信息
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.LoginId_Name">
            <summary>
            登录ID_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.LoginId">
            <summary>
            登录ID
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.Password_Name">
            <summary>
            密码_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.Enabled_Name">
            <summary>
            启用_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.SystemInlay_Name">
            <summary>
            系统内置_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.SystemInlay">
            <summary>
            系统内置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.LoginTime_Name">
            <summary>
            登录时间_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.LoginTime">
            <summary>
            登录时间
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.LoginIp_Name">
            <summary>
            登录IP_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.LoginIp">
            <summary>
            登录IP
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.Logins_Name">
            <summary>
            登录次数_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.Logins">
            <summary>
            登录次数
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.LogoutTime_Name">
            <summary>
            退出登录时间_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.LogoutTime">
            <summary>
            退出登录时间
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.MerchantId_Name">
            <summary>
            商户ID_名称
            一般情况没有，特殊情况下有用，如SAAS中的商户
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.MerchantId">
            <summary>
            商户ID
            一般情况没有，特殊情况下有用，如SAAS中的商户
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BasicUserInfo`1.MerchantIdString_Name">
            <summary>
            商户ID字符串_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BasicUserInfo`1.MerchantIdString">
            <summary>
            商户ID字符串，如果ID类型为长整型，则在JS前端使用此属性为字符串类型，因为JS中长整型会丢失精度
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.BasicUserInfo">
            <summary>
            基本用户信息
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.BusinessException">
            <summary>
            业务异常
            初步定义：
            100-9999为平台编码
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BusinessException.code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BusinessException.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BusinessException.msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BusinessException.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.BusinessException.desc">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.BusinessException.Desc">
            <summary>
            描述
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.BusinessException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="code">编码</param>
            <param name="msg">消息</param>
            <param name="desc">描述</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.BusinessException.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.CodeNameFilterInfo">
            <summary>
            编码名称筛选信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CodeNameFilterInfo.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CodeNameFilterInfo.BlurName">
            <summary>
            模糊名称
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.CodeNameInfo`1">
            <summary>
            编码名称信息
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.CodeNameInfo`1.Code_Name">
            <summary>
            编码_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CodeNameInfo`1.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.CodeNameInfo`1.Name_Name">
            <summary>
            名称_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CodeNameInfo`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.CodeNameInfo">
            <summary>
            编码名称信息
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.CommonUseData">
            <summary>
            通用数据
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.Controller">
            <summary>
            控制器
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.Action">
            <summary>
            动作
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.Path">
            <summary>
            路径，小写
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.CommMode">
            <summary>
            通讯方式
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.MenuCode">
            <summary>
            菜单编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.FunctionCodes">
            <summary>
            功能编码数组
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.CurrUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.Token">
            <summary>
            票据
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.EventId">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.Extend">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.CommonUseData.callbacks">
            <summary>
            回调字典
            Key：方法
            value：参数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.CommonUseData.Callbacks">
            <summary>
            回调字典
            Key：方法
            value：参数
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.CommonUseData.AddCallback(System.Action{System.Object},System.Object)">
            <summary>
            添加回调
            </summary>
            <param name="callback">回调方法</param>
            <param name="inParams">输入参数数组</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.CommonUseData.RemoveCallback(System.Action{System.Object})">
            <summary>
            移除回调
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.CommonUseData.ClearCallback">
            <summary>
            清空回调
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.CommonUseDataExtensions">
            <summary>
            通用数据扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.CommonUseDataExtensions.GetCurrUser(Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            获取当前用户
            </summary>
            <param name="comData">通用数据</param>
            <returns>当前用户</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.CommonUseDataExtensions.GetToken(Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            获取Token，如果里面的为空，则会执行App.GetTokenFunc() 
            </summary>
            <param name="comData">通用数据</param>
            <returns>Token</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.CommonUseDataExtensions.GetEventId(Hzdtf.Utility.Model.CommonUseData,Hzdtf.Utility.TheOperation.ITheOperation)">
            <summary>
            获取事件ID，如果里面的为空，则会执行theOperation.EventId,如果传入的theOperation为null，则会执行 App.TheOperation.EventId
            </summary>
            <param name="comData">通用数据</param>
            <param name="theOperation">本次操作</param>
            <returns>事件ID</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.CommonUseDataExtensions.GetExtendValue(Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            获取扩展字典值
            </summary>
            <param name="comData">通用数据</param>
            <param name="key">键</param>
            <returns>扩展字典值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.CommonUseDataExtensions.GetTag(Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            获取标签
            </summary>
            <param name="comData">通用数据</param>
            <returns>扩展字典值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.DateRangePageInfo">
            <summary>
            日期范围页信息，默认为1个月内
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.DateRangePageInfo.StartDate">
            <summary>
            开始日期
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.DateRangePageInfo.EndDate">
            <summary>
            结束日期
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.FilterInfo">
            <summary>
            筛选信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.FilterInfo.StartCreateTime">
            <summary>
            开始创建时间
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.FilterInfo.EndCreateTime">
            <summary>
            结束创建时间
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.FilterInfo.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.FilterInfo.SortName">
            <summary>
            排序名称
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.FunCodeDefine">
            <summary>
            功能编码定义
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.QUERY_CODE">
            <summary>
            查询编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.ADD_CODE">
            <summary>
            添加编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.EDIT_CODE">
            <summary>
            编辑编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.REMOVE_CODE">
            <summary>
            移除编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.SAVE_CODE">
            <summary>
            保存编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.IMPORT_EXCEL_CODE">
            <summary>
            导入Excel编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.EXPORT_EXCEL_CODE">
            <summary>
            导出Excel编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.RESET_PASSWORD_CODE">
            <summary>
            重置密码编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.UPLOAD_CODE">
            <summary>
            上传编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.DOWNLOAD_CODE">
            <summary>
            下载编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.APPLY">
            <summary>
            申请编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.AUDIT">
            <summary>
            审核编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.UNDO">
            <summary>
            撤消
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.REDO">
            <summary>
            重做
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.FunCodeDefine.FORCE_REMOVE">
            <summary>
            强制删除
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.IAuthToken">
            <summary>
            授权票据接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.IAuthToken.GetToken">
            <summary>
            获取票据
            </summary>
            <returns>票据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Identitys.GuidId">
            <summary>
            Guid ID
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.GuidId.ConvertTo(System.String)">
            <summary>
            转换
            </summary>
            <param name="idStr">ID字符串</param>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.GuidId.New">
            <summary>
            新建
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.GuidId.Default">
            <summary>
            默认
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.GuidId.IsEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="id">ID</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.GuidId.GetValueSql(System.Guid)">
            <summary>
            获取值SQL
            </summary>
            <param name="id">ID</param>
            <returns>值SQL</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Identitys.IIdentity`1">
            <summary>
            ID接口
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IIdentity`1.ConvertTo(System.String)">
            <summary>
            转换
            </summary>
            <param name="idStr">ID字符串</param>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IIdentity`1.New">
            <summary>
            新建
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IIdentity`1.Default">
            <summary>
            默认
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IIdentity`1.IsEmpty(`0)">
            <summary>
            是否为空
            </summary>
            <param name="id">ID</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IIdentity`1.GetValueSql(`0)">
            <summary>
            获取值SQL
            </summary>
            <param name="id">ID</param>
            <returns>值SQL</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Identitys.IntId">
            <summary>
            整型ID
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IntId.ConvertTo(System.String)">
            <summary>
            转换
            </summary>
            <param name="idStr">ID字符串</param>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IntId.New">
            <summary>
            新建
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IntId.Default">
            <summary>
            默认
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IntId.IsEmpty(System.Int32)">
            <summary>
            是否为空
            </summary>
            <param name="id">ID</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.IntId.GetValueSql(System.Int32)">
            <summary>
            获取值SQL
            </summary>
            <param name="id">ID</param>
            <returns>值SQL</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Identitys.SnowflakeId">
            <summary>
            雪花算法ID
            分布式全局唯一ID
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.Identitys.SnowflakeId.worker">
            <summary>
            ID工作
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.Identitys.SnowflakeId.syncWorker">
            <summary>
            同步ID工作
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.SnowflakeId.Init(System.Int64,System.Int64,System.Int64)">
            <summary>
            初始化，如果ID工作对象已初始化过，则会忽略
            </summary>
            <param name="workerId">工作ID</param>
            <param name="datacenterId">数据中心ID</param>
            <param name="sequence">序列</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.SnowflakeId.ConvertTo(System.String)">
            <summary>
            转换
            </summary>
            <param name="idStr">ID字符串</param>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.SnowflakeId.New">
            <summary>
            新建
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.SnowflakeId.Default">
            <summary>
            默认
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.SnowflakeId.IsEmpty(System.Int64)">
            <summary>
            是否为空
            </summary>
            <param name="id">ID</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.SnowflakeId.GetValueSql(System.Int64)">
            <summary>
            获取值SQL
            </summary>
            <param name="id">ID</param>
            <returns>值SQL</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Identitys.StringId">
            <summary>
            字符串ID
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.StringId.ConvertTo(System.String)">
            <summary>
            转换
            </summary>
            <param name="idStr">ID字符串</param>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.StringId.New">
            <summary>
            新建
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.StringId.Default">
            <summary>
            默认
            </summary>
            <returns>ID值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.StringId.IsEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="id">ID</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Identitys.StringId.GetValueSql(System.String)">
            <summary>
            获取值SQL
            </summary>
            <param name="id">ID</param>
            <returns>值SQL</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.InstanceMapMethodsInfo">
            <summary>
            实例映射方法信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.InstanceMapMethodsInfo.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.InstanceMapMethodsInfo.Methods">
            <summary>
            方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.InstanceMapMethodsInfo.GetMethodByName(System.String)">
            <summary>
            根据方法名获取方法
            </summary>
            <param name="methodName">方法名</param>
            <returns>方法</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.JqGridTreeInfo`1">
            <summary>
            JqG网格树信息
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Model.JqGridTreeInfo`1.ParentId">
            <summary>
            父ID
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.JqGridTreeInfo`1.Level">
            <summary>
            层级，从0开始
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.JqGridTreeInfo`1.IsLeaf">
            <summary>
            是否叶子节点
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.JqGridTreeInfo`1.Epanded">
            <summary>
            是否展开
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.KeyValueInfo`2">
            <summary>
            键值信息
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Model.KeyValueInfo`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.KeyValueInfo`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.KeywordFilterInfo">
            <summary>
            关键字筛选信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.KeywordFilterInfo.Keyword">
            <summary>
            关键字
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.LoginInfo">
            <summary>
            登录信息
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.LoginInfo.LoginId">
            <summary>
            登录ID
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.LoginInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.LoginInfo.VerificationCode">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.LoginInfo.ReturnUrl">
            <summary>
            返回路径
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.LoginReturnInfo">
            <summary>
            登录返回信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.LoginReturnInfo.IsVerificationCode">
            <summary>
            是否需要验证码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.LoginReturnInfo.Token">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.LoginReturnInfo.ReturnUrl">
            <summary>
            返回路径
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.PageInfo`1">
            <summary>
            页面信息
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Model.PageInfo`1.Functions">
            <summary>
            功能列表
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.PageInfo">
            <summary>
            页面信息
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.Page.IPagingReturnConvert">
            <summary>
            分页返回转换接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Page.IPagingReturnConvert.Convert``1(Hzdtf.Utility.Model.Return.ReturnInfo{Hzdtf.Utility.Model.Page.PagingInfo{``0}})">
            <summary>
            转换
            </summary>
            <typeparam name="RowT">行类型</typeparam>
            <param name="returnInfo">返回信息</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Page.Paging2Info`1">
            <summary>
            分页2信息
            @ 黄振东
            </summary>
            <typeparam name="RowT">行类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.Paging2Info`1.Rows">
            <summary>
            列表行
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.Paging2Info`1.Page">
            <summary>
            页码（从1开始）
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.Paging2Info`1.PageSize">
            <summary>
            每页记录数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.Paging2Info`1.Records">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.Paging2Info`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Page.Paging2Info`1.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Page.PagingInfo`1">
            <summary>
            分页信息
            @ 黄振东
            </summary>
            <typeparam name="RowT">行类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.PagingInfo`1.Rows">
            <summary>
            列表行
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.PagingInfo`1.PageIndex">
            <summary>
            页码（从0开始）
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.PagingInfo`1.PageSize">
            <summary>
            每页记录数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.PagingInfo`1.Records">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.PagingInfo`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Page.PagingInfo`1.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Page.PagingInfo`1.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.PersonTimeInfo`1">
            <summary>
            带有人时间信息
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.PersonTimeInfo`1.CreaterId_Name">
            <summary>
            创建人ID_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.PersonTimeInfo`1.CreaterId">
            <summary>
            创建人ID
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.PersonTimeInfo`1.CreaterIdString_Name">
            <summary>
            创建人ID字符串_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.PersonTimeInfo`1.CreaterIdString">
            <summary>
            创建人ID字符串，如果ID类型为长整型，则在JS前端使用此属性为字符串类型，因为JS中长整型会丢失精度
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.PersonTimeInfo`1.Creater_Name">
            <summary>
            创建人_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.PersonTimeInfo`1.Creater">
            <summary>
            创建人
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.PersonTimeInfo`1.ModifierId_Name">
            <summary>
            修改人ID_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.PersonTimeInfo`1.ModifierId">
            <summary>
            修改人ID
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.PersonTimeInfo`1.ModifierIdString_Name">
            <summary>
            修改人ID字符串_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.PersonTimeInfo`1.ModifierIdString">
            <summary>
            修改人ID字符串，如果ID类型为长整型，则在JS前端使用此属性为字符串类型，因为JS中长整型会丢失精度
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.PersonTimeInfo`1.Modifier_Name">
            <summary>
            修改人_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.PersonTimeInfo`1.Modifier">
            <summary>
            修改人
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.PersonTimeInfo">
            <summary>
            带有人时间信息
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.PersonTimeTenantInfo`1">
            <summary>
            带有人时间商户信息
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.PersonTimeTenantInfo`1.MerchantId_Name">
            <summary>
            商户ID_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.PersonTimeTenantInfo`1.MerchantId">
            <summary>
            商户ID
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.PersonTimeTenantInfo`1.MerchantIdString_Name">
            <summary>
            商户ID字符串_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.PersonTimeTenantInfo`1.MerchantIdString">
            <summary>
            商户ID字符串，如果ID类型为长整型，则在JS前端使用此属性为字符串类型，因为JS中长整型会丢失精度
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.SimpleInfoExtensions">
            <summary>
            带人和时间信息扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.SimpleInfoExtensions.SetCreateInfo``1(Hzdtf.Utility.Model.PersonTimeInfo{``0},Hzdtf.Utility.Model.BasicUserInfo{``0})">
            <summary>
            设置创建信息
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
            <param name="model">模型</param>
            <param name="currUser">当前用户</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.SimpleInfoExtensions.SetModifyInfo``1(Hzdtf.Utility.Model.PersonTimeInfo{``0},Hzdtf.Utility.Model.BasicUserInfo{``0})">
            <summary>
            设置修改信息
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
            <param name="model">模型</param>
            <param name="currUser">当前用户</param>
        </member>
        <member name="T:Hzdtf.Utility.Model.Return.BasicReturnInfo">
            <summary>
            基本返回信息
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.Return.BasicReturnInfo.BASIC_FULL_NAME">
            <summary>
            基本全称
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.Return.BasicReturnInfo.SUCCESS_CODE">
            <summary>
            成功编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.Return.BasicReturnInfo.DEFAULT_FAILURE_CODE">
            <summary>
            默认失败编码
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.Return.BasicReturnInfo.isToJsonString">
            <summary>
            是否转换为JSON
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.#ctor(System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="isToJsonString">是否转换为JSON</param>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.BasicReturnInfo.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.BasicReturnInfo.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.BasicReturnInfo.Desc">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.BasicReturnInfo.Culture">
            <summary>
            文化
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.BasicReturnInfo.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.BasicReturnInfo.Extend">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.Return.BasicReturnInfo.Ex">
            <summary>
            异常
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.Success">
            <summary>
            是否成功
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.Failure">
            <summary>
            是否失败
            </summary>
            <returns>是否失败</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.SetSuccessMsg(System.String,System.String)">
            <summary>
            设置成功消息
            </summary>
            <param name="msg">消息</param>
            <param name="desc">描述</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.SetFailureMsg(System.String,System.String)">
            <summary>
            设置失败消息
            </summary>
            <param name="msg">消息</param>
            <param name="desc">描述</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.SetFailureMsg(System.String,System.String,System.Exception)">
            <summary>
            设置失败消息
            </summary>
            <param name="msg">消息</param>
            <param name="desc">描述</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.SetFailureMsg(System.Int32,System.String,System.String,System.Exception)">
            <summary>
            设置失败消息
            </summary>
            <param name="code">编码</param>
            <param name="msg">消息</param>
            <param name="desc">描述</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.SetCodeMsg(System.Int32,System.String,System.String,System.Exception)">
            <summary>
            设置编码和消息
            </summary>
            <param name="code">编码</param>
            <param name="msg">消息</param>
            <param name="desc">描述</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.SetMsg(System.String,System.String)">
            <summary>
            设置消息
            </summary>
            <param name="msg">消息</param>
            <param name="desc">描述</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.FromBasic(Hzdtf.Utility.Model.Return.BasicReturnInfo)">
            <summary>
            设置来自另外一个基本返回对象
            </summary>
            <param name="basicReturn">基本返回</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.ThrowException">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnInfo.IsThisType(System.Type)">
            <summary>
            是否本身类型
            </summary>
            <param name="type">类型</param>
            <returns>是否本身类型</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Return.BasicReturnException">
            <summary>
            基本返回异常
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.BasicReturnException.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.BasicReturnException.Desc">
            <summary>
            描述
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnException.#ctor(Hzdtf.Utility.Model.Return.BasicReturnInfo)">
            <summary>
            构造方法
            </summary>
            <param name="basicReturn">基本返回</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.BasicReturnException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="code">编码</param>
            <param name="message">消息</param>
            <param name="desc">描述</param>
        </member>
        <member name="T:Hzdtf.Utility.Model.Return.DefaultReturnInfo">
            <summary>
            默认返回信息
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.Return.DefaultReturnInfo.BASIC_FULL_NAME">
            <summary>
            基本全称
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.DefaultReturnInfo.IsThisType(System.Type)">
            <summary>
            是否本身类型
            </summary>
            <param name="type">类型</param>
            <returns>是否本身类型</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.DefaultReturnInfo.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.DefaultReturnInfo.#ctor(System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="isToJsonString">是否转换为JSON</param>
        </member>
        <member name="T:Hzdtf.Utility.Model.Return.Page1ReturnConvert">
            <summary>
            分页从1开始的返回转换
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.Page1ReturnConvert.Convert``1(Hzdtf.Utility.Model.Return.ReturnInfo{Hzdtf.Utility.Model.Page.PagingInfo{``0}})">
            <summary>
            转换
            </summary>
            <typeparam name="RowT">行类型</typeparam>
            <param name="returnInfo">返回信息</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1">
            <summary>
            分页从1开始的返回信息
            @ 黄振东
            </summary>
            <typeparam name="RowT">行类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.BASIC_FULL_NAME">
            <summary>
            基本全称
            除了泛型的组合
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.Rows">
            <summary>
            列表行
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.Page">
            <summary>
            页码（从1开始）
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.PageSize">
            <summary>
            每页记录数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.Records">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.Total">
            <summary>
            总页数
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.From(Hzdtf.Utility.Model.Return.ReturnInfo{Hzdtf.Utility.Model.Page.PagingInfo{`0}})">
            <summary>
            从分页信息转换为分页从1开始的返回信息
            </summary>
            <param name="returnInfo">返回信息</param>
            <returns>分页从1开始的返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.#ctor(System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="isToJsonString">是否转换为JSON</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.Page1ReturnInfo`1.IsThisType(System.Type)">
            <summary>
            是否本身类型
            </summary>
            <param name="type">类型</param>
            <returns>是否本身类型</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Return.ReturnInfo`1">
            <summary>
            返回信息
            @ 黄振东
            </summary>
            <typeparam name="DataT">数据类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.Return.ReturnInfo`1.BASIC_FULL_NAME">
            <summary>
            基本全称
            除了泛型的组合
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.Return.ReturnInfo`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.ReturnInfo`1.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.ReturnInfo`1.#ctor(System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="isToJsonString">是否转换为JSON</param>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.ReturnInfo`1.IsThisType(System.Type)">
            <summary>
            是否本身类型
            </summary>
            <param name="type">类型</param>
            <returns>是否本身类型</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.Return.ReturnUtil">
            <summary>
            返回辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.Return.ReturnUtil.IsReturnType(System.Type)">
            <summary>
            判断类型是否为返回类型
            </summary>
            <param name="type">类型</param>
            <returns>类型是否为本类</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.RpcDataInfo">
            <summary>
            RPC数据信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.RpcDataInfo.MethodFullPath">
            <summary>
            方法全路径
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.RpcDataInfo.MethodParams">
            <summary>
            方法的参数数组
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.SimpleInfo`1">
            <summary>
            简单信息
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.SimpleInfo`1.Id_Name">
            <summary>
            ID_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.SimpleInfo`1.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.SimpleInfo`1.IdString_Name">
            <summary>
            ID字符串_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.SimpleInfo`1.IdString">
            <summary>
            ID字符串，如果ID类型为长整型，则在JS前端使用此属性为字符串类型，因为JS中长整型会丢失精度
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.SimpleInfo`1.Clone">
            <summary>
            浅拷贝
            </summary>
            <returns>拷贝后的对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.SimpleInfo`1.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.SimpleInfo">
            <summary>
            简单信息
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.SimpleTenanInfo`1">
            <summary>
            简单商户信息
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.SimpleTenanInfo`1.MerchantId_Name">
            <summary>
            商户ID_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.SimpleTenanInfo`1.MerchantId">
            <summary>
            商户ID
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.SqlPropInfo">
            <summary>
            SQL属性信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.SqlPropInfo.Top">
            <summary>
            前面几条，如果为0，则不加此条件
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.SqlPropInfo.AppendMerchantId">
            <summary>
            追加商户ID，默认值为“默认”
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.SqlPropInfo.PropertyNames">
            <summary>
            属性名称集合，如果为空则获取全部
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.SqlPropInfo.WhereSql">
            <summary>
            条件SQL，不包含where
            如果有包含属性，则用格式（区分大小写）：|/属性名/|
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.SqlPropInfo.PackPropName(System.String)">
            <summary>
            封装属性名
            </summary>
            <param name="propName">属性名</param>
            <returns>封装后的属性名</returns>
        </member>
        <member name="T:Hzdtf.Utility.Model.TimeInfo`1">
            <summary>
            带有时间的信息
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.Model.TimeInfo`1.CreateTime_Name">
            <summary>
            创建时间_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.TimeInfo`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.TimeInfo`1.ModifyTime_Name">
            <summary>
            修改时间_名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Model.TimeInfo`1.ModifyTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.TimeInfo">
            <summary>
            带有时间的信息
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Model.UserTool`1">
            <summary>
            用户工具类
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Model.UserTool`1.CurrUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.UserTool`1.GetCurrUserFunc">
            <summary>
            获取当前用户方法
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Model.UserTool`1.TestUser">
            <summary>
            测试用户
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Model.UserTool`1.GetCurrUser(Hzdtf.Utility.Model.BasicUserInfo{`0},System.Boolean)">
            <summary>
            获取当前用户，如果传入的用户不为null，则取传入的用户。否则调GetCurrUserFunc委托
            </summary>
            <param name="currUser">当前用户</param>
            <param name="notExistsIsOutTestUser">如果不存在是否输出测试用户</param>
            <returns>当前用户</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.UserTool`1.GetCurrUser(Hzdtf.Utility.Model.CommonUseData,System.Boolean)">
            <summary>
            获取当前用户，如果传入的用户不为null，则取传入的用户。否则调GetCurrUserFunc委托
            </summary>
            <param name="comUse">通用数据</param>
            <param name="notExistsIsOutTestUser">如果不存在是否输出测试用户</param>
            <returns>当前用户</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.UserTool`1.GetCurrUser(System.Object,System.Boolean)">
            <summary>
            获取当前用户，如果传入的用户不为null，则取传入的用户。否则调GetCurrUserFunc委托
            </summary>
            <param name="currUser">当前用户</param>
            <param name="notExistsIsOutTestUser">如果不存在是否输出测试用户</param>
            <returns>当前用户</returns>
        </member>
        <member name="M:Hzdtf.Utility.Model.UserTool`1.GetCurrUser``1(Hzdtf.Utility.Model.BasicUserInfo{`0},System.Boolean)">
            <summary>
            获取当前用户，如果传入的用户不为null，则取传入的用户。否则调GetCurrUserFunc委托
            </summary>
            <typeparam name="UserT">用户类型</typeparam>
            <param name="currUser">当前用户</param>
            <param name="notExistsIsOutTestUser">如果不存在是否输出测试用户</param>
            <returns>当前用户</returns>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.IBytesReceive">
            <summary>
            字节数组接收接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IBytesReceive.Receive(System.Func{System.Byte[],System.Byte[]})">
            <summary>
            接收消息
            </summary>
            <param name="receiveMessageFun">接收消息回调</param>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.IMethodCall">
            <summary>
            方法调用接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IMethodCall.Invoke(System.String,System.Object[])">
            <summary>
            执行
            </summary>
            <param name="fullPath">全路径</param>
            <param name="parames">参数数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IMethodCall.Invoke(System.String,System.Reflection.MethodInfo@,System.Object[])">
            <summary>
            执行
            </summary>
            <param name="fullPath">全路径</param>
            <param name="method">方法</param>
            <param name="parames">参数数组</param>
            <returns>返回值</returns>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.IProcessCall">
            <summary>
            过程调用接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IProcessCall.Invoke(System.String,System.Object[])">
            <summary>
            执行
            </summary>
            <param name="key">键</param>
            <param name="parames">参数数组</param>
            <returns>返回值</returns>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.IRpcClient">
            <summary>
            RPC客户端接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IRpcClient.Call(System.Byte[])">
            <summary>
            调用
            </summary>
            <param name="message">消息</param>
            <returns>返回字节流</returns>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IRpcClient.CallAsync(System.Byte[])">
            <summary>
            异步调用
            </summary>
            <param name="message">消息</param>
            <returns>返回字节流任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.IRpcClientMethod">
            <summary>
            Rpc客户端方法接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IRpcClientMethod.Call(System.Reflection.MethodInfo,System.Object)">
            <summary>
            调用
            </summary>
            <param name="method">方法</param>
            <param name="message">消息</param>
            <returns>返回数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.IRpcServer">
            <summary>
            RPC服务端接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.IRpcServerListen">
            <summary>
            Rpc服务监听接口
            @ 黄振东
            </summary>
        </member>
        <member name="E:Hzdtf.Utility.ProcessCall.IRpcServerListen.ReceivingError">
            <summary>
            接收中错误
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IRpcServerListen.Listen">
            <summary>
            监听
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.IRpcServerListen.ListenAsync">
            <summary>
            异步监听
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.MethodCallCache">
            <summary>
            方法调用缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.ProcessCall.MethodCallCache.dicCaches">
            <summary>
            缓存键
            key:类全路径名(不包含方法名)
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.ProcessCall.MethodCallCache.syncDicCaches">
            <summary>
            同步缓存键
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.ProcessCall.MethodCallCache.ParamValueConvert">
            <summary>
            参数值转换,默认是JsonConvertTypeValue
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.ProcessCall.MethodCallCache.Instance">
            <summary>
            实例,默认是ReflectInstance
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.MethodCallCache.Invoke(System.String,System.Object[])">
            <summary>
            执行
            </summary>
            <param name="fullPath">全路径</param>
            <param name="parames">参数数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.MethodCallCache.Invoke(System.String,System.Reflection.MethodInfo@,System.Object[])">
            <summary>
            执行
            </summary>
            <param name="fullPath">全路径</param>
            <param name="method">方法</param>
            <param name="parames">参数数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.MethodCallCache.AutoEqualMethodParams(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            自动匹配参数类型
            </summary>
            <param name="method">方法</param>
            <param name="parames">参数数组</param>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.MethodCallCache.GetCache">
            <summary>
            获取缓存对象
            </summary>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.MethodCallCache.GetSyncCache">
            <summary>
            获取同步缓存对象
            </summary>
            <returns>同步缓存对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.RpcServerListen">
            <summary>
            Rpc服务监听
            @ 黄振东
            </summary>
        </member>
        <member name="E:Hzdtf.Utility.ProcessCall.RpcServerListen.Closed">
            <summary>
            关闭后事件
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.ProcessCall.RpcServerListen.BytesSerialization">
            <summary>
            字节数组序列化，默认为json序列化
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.ProcessCall.RpcServerListen.InterfaceMapImpl">
            <summary>
            接口映射实现，默认为InterfaceMapImplCache
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.ProcessCall.RpcServerListen.MethodCall">
            <summary>
            方法调用，默认为MethodCallCache
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.ProcessCall.RpcServerListen.RpcServer">
            <summary>
            Rpc服务端
            </summary>
        </member>
        <member name="E:Hzdtf.Utility.ProcessCall.RpcServerListen.ReceivingError">
            <summary>
            接收中错误事件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.RpcServerListen.Listen">
            <summary>
            监听
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.RpcServerListen.ListenAsync">
            <summary>
            异步监听
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.RpcServerListen.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.RpcServerListen.OnClosed">
            <summary>
            执行关闭后事件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.RpcServerListen.OnReceivingError(System.String,System.Exception)">
            <summary>
            执行接收中错误事件
            </summary>
            <param name="err">错误消息</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.RpcServerListen.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.ProcessCall.StaticProcessCallCache">
            <summary>
            静态过程调用缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.readerConfig">
            <summary>
            读取配置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.dicCaches">
            <summary>
            缓存键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.syncDicCaches">
            <summary>
            同步缓存键
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.dicClasses">
            <summary>
            类配置字典
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.syncDicClasses">
            <summary>
            同步类配置字典
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.Invoke(System.String,System.Object[])">
            <summary>
            执行
            </summary>
            <param name="key">键</param>
            <param name="parames">参数数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.Set(Hzdtf.Utility.Data.IReader{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            设置对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.GetCache">
            <summary>
            获取缓存对象
            </summary>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.ProcessCall.StaticProcessCallCache.GetSyncCache">
            <summary>
            获取同步缓存对象
            </summary>
            <returns>同步缓存对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Proxy.BusinessDispatchProxyBase`1">
            <summary>
            业务动态代理基类
            注意：此类会自动判断代理的是否异步方法（返回类型为Task），如果是则自动开启异步，Task返回值必须是object类型，否则会报错
            如果使用默认的异步方法，性能较差，不推荐使用。如果非要使用异步，请在调用方手动开启异步线程里执行同步方法
            @ 黄振东
            </summary>
            <typeparam name="SubClassT">子类类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Proxy.BusinessDispatchProxyBase`1.Create``1">
            <summary>
            创建
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>类型实例</returns>
        </member>
        <member name="M:Hzdtf.Utility.Proxy.BusinessDispatchProxyBase`1.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行
            </summary>
            <param name="targetMethod">目标方法</param>
            <param name="args">方法参数数组</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Proxy.BusinessDispatchProxyBase`1.InvokeBusiness(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行业务
            </summary>
            <param name="targetMethod">目标方法</param>
            <param name="args">方法参数数组</param>
            <returns>业务返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Proxy.BusinessDispatchProxyBase`1.InvokeBusinessAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            异步执行业务
            </summary>
            <param name="targetMethod">目标方法</param>
            <param name="args">方法参数数组</param>
            <returns>任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.Proxy.IBusinessDispatchProxy">
            <summary>
            业务动态代理接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Proxy.IBusinessDispatchProxy.Create``1">
            <summary>
            创建
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>类型实例</returns>
        </member>
        <member name="T:Hzdtf.Utility.Proxy.RpcDispatchProxyClient`1">
            <summary>
            RPC动态代理客户端
            @ 黄振东
            </summary>
            <typeparam name="SubClassT">子类类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Proxy.RpcDispatchProxyClient`1.RpcClientMethod">
            <summary>
            Rpc客户端方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Proxy.RpcDispatchProxyClient`1.InvokeBusiness(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行业务
            </summary>
            <param name="targetMethod">目标方法</param>
            <param name="args">方法参数数组</param>
            <returns>业务返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Proxy.RpcDispatchProxyClient`1.CreateRpcClientMethod">
            <summary>
            创建默认Rpc客户端方法
            </summary>
            <returns>Rpc客户端方法</returns>
        </member>
        <member name="T:Hzdtf.Utility.Proxy.RpcDispatchProxyClient">
            <summary>
            RPC动态代理客户端
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Release.IClearable">
            <summary>
            可清空的接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Release.IClearable.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Release.IClose">
            <summary>
            关闭的接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Release.IClose.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Release.ICloseable">
            <summary>
            可关闭的接口
            @ 黄振东
            </summary>
        </member>
        <member name="E:Hzdtf.Utility.Release.ICloseable.Closed">
            <summary>
            关闭后事件
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Builder.HttpServicesBuilder">
            <summary>
            Http服务生成
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.HttpServicesBuilder.ServiceProvider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.HttpServicesBuilder.ServiceName">
            <summary>
            服务名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.HttpServicesBuilder.Sheme">
            <summary>
            方案
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.HttpServicesBuilder.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.HttpServicesBuilder.LoadBalance">
            <summary>
            负载均衡策略
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.HttpServicesBuilder.BuilderAsync(System.String)">
            <summary>
            异步生成地址
            </summary>
            <param name="path">路径</param>
            <returns>生成地址任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.HttpServicesBuilder.BuilderByBaseAddress(System.String,System.String)">
            <summary>
            根据基地址生成地址
            </summary>
            <param name="baseAddress">基地址</param>
            <param name="path">路径</param>
            <returns>生成地址</returns>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Builder.IServicesBuilder">
            <summary>
            服务生成器接口
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.IServicesBuilder.ServiceProvider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.IServicesBuilder.ServiceName">
            <summary>
            服务名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.IServicesBuilder.Sheme">
            <summary>
            方案
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.IServicesBuilder.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Builder.IServicesBuilder.LoadBalance">
            <summary>
            负载均衡策略
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.IServicesBuilder.BuilderAsync(System.String)">
            <summary>
            异步生成地址
            </summary>
            <param name="path">路径</param>
            <returns>生成地址任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.IServicesBuilder.BuilderByBaseAddress(System.String,System.String)">
            <summary>
            根据基地址生成地址
            </summary>
            <param name="baseAddress">基地址</param>
            <param name="path">路径</param>
            <returns>生成地址</returns>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Builder.IUnityServicesBuilder">
            <summary>
            统一服务生成器接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.IUnityServicesBuilder.BuilderAsync(System.String,System.String,System.String)">
            <summary>
            异步生成地址
            </summary>
            <param name="serviceName">服务名</param>
            <param name="path">路径</param>
            <param name="tag">标签</param>
            <returns>生成地址任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.IUnityServicesBuilder.BuilderByBaseAddress(System.String,System.String,System.String,System.String)">
            <summary>
            根据基地址生成地址
            </summary>
            <param name="serviceName">服务名</param>
            <param name="baseAddress">基地址</param>
            <param name="tag">标签</param>
            <param name="path">路径</param>
            <returns>生成地址</returns>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Builder.UnityServicesBuilder">
            <summary>
            统一服务生成
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Builder.UnityServicesBuilder.servicesProvider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Builder.UnityServicesBuilder.unityServicesOptions">
            <summary>
            统一服务配置
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.UnityServicesBuilder.#ctor(Hzdtf.Utility.RemoteService.Provider.IServicesProvider,Hzdtf.Utility.RemoteService.Options.IUnityServicesOptions)">
            <summary>
            构造方法
            </summary>
            <param name="servicesProvider">服务提供者</param>
            <param name="unityServicesOptions">统一服务配置</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.UnityServicesBuilder.BuilderAsync(System.String,System.String,System.String)">
            <summary>
            异步生成地址
            </summary>
            <param name="serviceName">服务名</param>
            <param name="path">路径</param>
            <param name="tag">标签</param>
            <returns>生成地址任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.UnityServicesBuilder.BuilderByBaseAddress(System.String,System.String,System.String,System.String)">
            <summary>
            根据基地址生成地址
            </summary>
            <param name="serviceName">服务名</param>
            <param name="baseAddress">基地址</param>
            <param name="tag">标签</param>
            <param name="path">路径</param>
            <returns>生成地址</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.UnityServicesBuilder.BuilderServiceOptions(System.String,System.String)">
            <summary>
            生成服务配置
            </summary>
            <param name="serviceName">服务名称</param>
            <param name="tag">标签</param>
            <returns>服务配置</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Builder.UnityServicesBuilder.GetServicesOptions(Hzdtf.Utility.RemoteService.Options.UnityServicesOptions,System.String,System.String)">
            <summary>
            根据服务名和标签获取服务选项配置
            </summary>
            <param name="options">服务配置</param>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>服务选项配置</returns>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Options.IUnityServicesOptions">
            <summary>
            统一服务配置接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Options.ServicesBasicOptions">
            <summary>
            服务基本选项配置
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Options.ServicesBasicOptions.LoadBalanceMode">
            <summary>
            负载均衡模式
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Options.ServicesBasicOptions.Sheme">
            <summary>
            方案
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Options.ServicesBasicOptions.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Options.ServicesOptions">
            <summary>
            服务选项配置
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Options.ServicesOptions.ServiceName">
            <summary>
            服务名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Options.ServicesOptions.LoadBalance">
            <summary>
            负载均衡
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Options.ServicesOptions.ServicesBuilder">
            <summary>
            服务生成器
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Options.GlobalServicesOptions">
            <summary>
            全局服务配置选项
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Options.UnityServicesOptions">
            <summary>
            统一服务选项配置
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Options.UnityServicesOptions.Services">
            <summary>
            服务配置数组
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Options.UnityServicesOptions.GlobalConfiguration">
            <summary>
            全局配置
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnityServicesOptions.Reset">
            <summary>
            重置，如果Services没有配置而GlobalConfiguration有配置，则用GlobalConfiguration代替。并设置默认值
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Options.UnitServicesOptionsBase">
            <summary>
            统一服务服务配置基类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnitServicesOptionsBase.#ctor(System.String,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">json文件</param>
            <param name="isExecWrite">是否执行写入</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnitServicesOptionsBase.#ctor(Hzdtf.Utility.RemoteService.Options.UnityServicesOptions,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="options">配置</param>
            <param name="isExecWrite">是否执行写入</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnitServicesOptionsBase.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnitServicesOptionsBase.Write(Hzdtf.Utility.RemoteService.Options.UnityServicesOptions)">
            <summary>
            写入
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnitServicesOptionsBase.WriteToStorage(Hzdtf.Utility.RemoteService.Options.UnityServicesOptions)">
            <summary>
            写入到存储里
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnitServicesOptionsBase.InitJsonFile(System.String)">
            <summary>
            初始化Json文件
            </summary>
            <param name="jsonFile">Json文件</param>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Options.UnityServicesOptionsCache">
            <summary>
            统一服务配置缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Options.UnityServicesOptionsCache.syncOptions">
            <summary>
            同步统一服务选项配置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Options.UnityServicesOptionsCache.options">
            <summary>
            统一服务选项配置
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnityServicesOptionsCache.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnityServicesOptionsCache.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">json文件</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnityServicesOptionsCache.#ctor(Hzdtf.Utility.RemoteService.Options.UnityServicesOptions)">
            <summary>
            构造方法
            </summary>
            <param name="options">配置</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnityServicesOptionsCache.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Options.UnityServicesOptionsCache.WriteToStorage(Hzdtf.Utility.RemoteService.Options.UnityServicesOptions)">
            <summary>
            写入到存储里
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Provider.INativeServicesProvider">
            <summary>
            原生服务提供者接口，代表着最原始的服务提供，比如直通第三方服务发现
            缓存不适合本接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.INativeServicesProvider.GetTheAddressesRegister(System.Action{System.String,System.String,System.String[]})">
            <summary>
            注册获取到地址数组后
            </summary>
            <param name="callback">回调,0：服务名，1：标签，2：地址数组</param>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Provider.IServicesProvider">
            <summary>
            服务提供者接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.IServicesProvider.GetAddresses(System.String,System.String)">
            <summary>
            异步根据服务名获取地址数组
            </summary>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>地址数组任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Provider.ServiceProviderAggReaderBase">
            <summary>
            服务提供者聚合读取基类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Provider.ServiceProviderAggReaderBase.dicProtoServicesReader">
            <summary>
            原生服务读取字典
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServiceProviderAggReaderBase.GetAddresses(System.String,System.String)">
            <summary>
            异步根据服务名获取地址数组
            </summary>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>地址数组任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServiceProviderAggReaderBase.GetCacheKey(System.String,System.String)">
            <summary>
            获取缓存键
            </summary>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>缓存键</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServiceProviderAggReaderBase.CreateReader(System.String,System.String)">
            <summary>
            创建读取
            </summary>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>读取</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServiceProviderAggReaderBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Provider.ServiceProviderBase">
            <summary>
            服务提供者基类，提供原生服务有更新触发
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Provider.ServiceProviderBase.actions">
            <summary>
            更新触发回调列表
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServiceProviderBase.GetAddresses(System.String,System.String)">
            <summary>
            异步根据服务名获取地址数组
            </summary>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>地址数组任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServiceProviderBase.ExecGetAddresses(System.String,System.String)">
            <summary>
            执行异步根据服务名获取地址数组
            </summary>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>地址数组任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServiceProviderBase.GetTheAddressesRegister(System.Action{System.String,System.String,System.String[]})">
            <summary>
            注册获取到地址数组后
            </summary>
            <param name="callback">回调,0：服务名，1：标签，2：地址数组</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServiceProviderBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Provider.ServiceProviderCacheType">
            <summary>
            服务提供者缓存类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Provider.ServiceProviderCacheType.NONE">
            <summary>
            不使用缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Provider.ServiceProviderCacheType.TIMER_REFRESH">
            <summary>
            主动刷新
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Provider.ServiceProviderCacheType.DALAY_REFRESH">
            <summary>
            延迟刷新
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Provider.ServicesProviderExtensions">
            <summary>
            服务提供者扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderExtensions.CreateServiceBuilder(Hzdtf.Utility.RemoteService.Provider.IServicesProvider,System.Action{Hzdtf.Utility.RemoteService.Builder.IServicesBuilder})">
            <summary>
            创建服务生成器
            </summary>
            <param name="service">服务提供者</param>
            <param name="config">配置回调</param>
            <returns>服务生成器</returns>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory">
            <summary>
            服务提供者内存缓存
            必须手工设置原生服务提供者
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.ProtoServicesProvider">
            <summary>
            原生服务提供者
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.cacheExpire">
            <summary>
            缓存过期时间（单位：秒）
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="cacheExpire">缓存失效时间（单位：秒），-1为永不过期</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            构造方法
            </summary>
            <param name="cache">缓存</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.GetAddresses(System.String,System.String)">
            <summary>
            异步根据服务名获取地址数组
            </summary>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>地址数组任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.Set(Hzdtf.Utility.RemoteService.Provider.IServicesProvider)">
            <summary>
            设置对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.GetCacheKey(System.String,System.String)">
            <summary>
            获取缓存键
            </summary>
            <param name="serviceName">服务名</param>
            <param name="tag">标签</param>
            <returns>缓存键</returns>
        </member>
        <member name="M:Hzdtf.Utility.RemoteService.Provider.ServicesProviderMemory.Finalize">
            <summary>
            析构方法
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions">
            <summary>
            统一服务生成配置
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.ServicesOptions">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.UnityServicesOptions">
            <summary>
            统一服务配置
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.ServiceBuilderConfigJsonFile">
            <summary>
            服务生成配置Json文件
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.UnityServicesBuilder">
            <summary>
            统一服务生成器
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.UnityServicesBuilderType">
            <summary>
            统一服务生成器类型
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.NativeServicesProvider">
            <summary>
            原生服务提供者
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.NativeServicesProviderType">
            <summary>
            原生服务提供者类型
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.ServicesProvider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions.ServicesProviderType">
            <summary>
            服务提供者类型
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RequestResource.IRequestResource">
            <summary>
            请求资源接口
            key：请求ID，value：资源键
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RequestResource.RequestResourceCache">
            <summary>
            请求资源缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RequestResource.RequestResourceCache.dicCache">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RequestResource.RequestResourceCache.syncDicCache">
            <summary>
            同步字典缓存
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RequestResource.RequestResourceCache.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.RequestResource.RequestResourceCache.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Resources.DatabasePoolBase">
            <summary>
            数据库池基类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Resources.DatabasePoolBase.Submit(System.Object)">
            <summary>
            提交
            </summary>
            <param name="value">值对象</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.DatabasePoolBase.CreateKey">
            <summary>
            创建一个新的键
            </summary>
            <returns>一个新的键</returns>
        </member>
        <member name="T:Hzdtf.Utility.Resources.DatabasePoolServiceBase">
            <summary>
            数据库服务基类
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Resources.DatabasePoolServiceBase.DatabasePool">
            <summary>
            数据库池
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Resources.DatabasePoolServiceBase.SlaveDatabasePool">
            <summary>
            从数据库池
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Resources.DatabasePoolServiceBase.GetDatabasePool(Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            获取数据库池
            如果输入是从，且没找到从，自动返回主
            </summary>
            <param name="mode">访问模式</param>
            <returns>数据库池</returns>
        </member>
        <member name="T:Hzdtf.Utility.Resources.DatabasePoolUtil">
            <summary>
            数据库池辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Resources.DatabasePoolUtil.StartExecCore(Hzdtf.Utility.Resources.IDatabasePool,System.Func{System.String,System.Object,System.Boolean},System.String,System.Boolean)">
            <summary>
            开始执行核心业务，此方法是为了封装统一的数据库池操作
            1、如果传入的键存在，则在此方法里不会释放此键的资源，由外面释放
            2、如果传入的键不存在，则创建新的键，并在此方法里释放资源
            </summary>
            <param name="databasePool">数据库池</param>
            <param name="func">处理业务回调</param>
            <param name="key">键</param>
            <param name="isHaveUpdate">是否有更新，如果为true，且key不存在，业务回调又返回true，则会调用databasePool.Submit()</param>
            <returns>影响行数</returns>
        </member>
        <member name="T:Hzdtf.Utility.Resources.IDatabasePool">
            <summary>
            数据库池接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Resources.IDatabasePool.Submit(System.Object)">
            <summary>
            提交
            </summary>
            <param name="value">值对象</param>
            <returns>影响行数</returns>
        </member>
        <member name="T:Hzdtf.Utility.Resources.IResourcePool`2">
            <summary>
            资源池接口
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Resources.IResourcePool`2.Count">
            <summary>
            资源数量
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Resources.IResourcePool`2.GetNewKey(System.Boolean@,`0)">
            <summary>
            获取新键
            1、如果键不存在，则新创建一个键与默认值，返回新的键
            2、如果存在，则返回已经存在的键
            </summary>
            <param name="isExists">是否已存在</param>
            <param name="key">键</param>
            <returns>键</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.IResourcePool`2.GetValue(`0)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.IResourcePool`2.GetNewValue(`0)">
            <summary>
            根据键获取新值
            1、如果键不存在，则返回默认值
            2、如果键存在，值不存在，则自动创建值返回
            3、如果键存在，值存在，则返回已存在的值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.IResourcePool`2.Release(`0,System.Boolean)">
            <summary>
            根据键释放资源
            </summary>
            <param name="key">键</param>
            <param name="isThisCreateKey">是否本身创建的键，如果为是，则释放，否则不释放，默认为是。此处应与GetNewKey中的out isExists对应</param>
        </member>
        <member name="M:Hzdtf.Utility.Resources.IResourcePool`2.ReleaseAll">
            <summary>
            释放所有资源
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Resources.ISlaveDatabasePool">
            <summary>
            从数据库池接口
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Resources.ISlaveDatabasePool.ExistsSlave">
            <summary>
            是否存在从
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Resources.ResourcePoolBase`2">
            <summary>
            资源池基类
            @ 黄振东
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
        </member>
        <member name="P:Hzdtf.Utility.Resources.ResourcePoolBase`2.Count">
            <summary>
            资源数量
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.GetNewKey(System.Boolean@,`0)">
            <summary>
            获取新键
            1、如果键不存在，则新创建一个键与默认值，返回新的键
            2、如果存在，则返回已经存在的键
            </summary>
            <param name="isExists">是否已存在</param>
            <param name="key">键</param>
            <returns>键</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.GetNewValue(`0)">
            <summary>
            根据键获取新值
            1、如果键不存在，则返回默认值
            2、如果键存在，值不存在，则自动创建值返回
            3、如果键存在，值存在，则返回已存在的值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.GetValue(`0)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.Release(`0,System.Boolean)">
            <summary>
            根据键释放资源
            </summary>
            <param name="key">键</param>
            <param name="currContextKeyNotExists">当前上下文的键是否不存在，如果为是，不释放，反之释放，默认为否。此处应与GetNewKey中的out isExists对应</param>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.ReleaseAll">
            <summary>
            释放所有资源
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.CreateKey">
            <summary>
            创建一个新的键
            </summary>
            <returns>一个新的键</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.CreateValue">
            <summary>
            创建一个新的值
            </summary>
            <returns>一个新的值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolBase`2.ReleaseValue(`1)">
            <summary>
            释放值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Hzdtf.Utility.Resources.ResourcePoolUtil">
            <summary>
            资源池辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Resources.ResourcePoolUtil.StartExecCore``2(Hzdtf.Utility.Resources.IResourcePool{``0,``1},System.Action{``0,``1},``0)">
            <summary>
            开始执行核心业务，此方法是为了封装统一的资源池操作
            1、如果传入的键存在，则在此方法里不会释放此键的资源，由外面释放
            2、如果传入的键不存在，则创建新的键，并在此方法里释放资源
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
            <param name="resourcePool">资源池</param>
            <param name="action">处理业务回调</param>
            <param name="key">键</param>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.ActionPermissionAttribute">
            <summary>
            动作权限属性
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.ActionPermissionAttribute.codes">
            <summary>
            编码数组
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.ActionPermissionAttribute.Codes">
            <summary>
            编码数组
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.ActionPermissionAttribute.resourceKey">
            <summary>
            资源键
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.ActionPermissionAttribute.ResourceKey">
            <summary>
            资源键
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.ActionPermissionAttribute.#ctor(System.String[],System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="codes">编码数组</param>
            <param name="id">ID</param>
            <param name="disabled">是否禁用</param>
            <param name="extendJson">扩展属性JSON</param>
            <param name="resourceKey">资源键</param>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.IRoutePermissionConfigReader">
            <summary>
            路由权限配置读取接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.IRoutePermissionReader">
            <summary>
            路由权限读取接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.PermissionAttributeBase">
            <summary>
            权限属性基类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.PermissionAttributeBase.id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.PermissionAttributeBase.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.PermissionAttributeBase.disabled">
            <summary>
            是否禁用
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.PermissionAttributeBase.Disabled">
            <summary>
            是否禁用
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.PermissionAttributeBase.extend">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.PermissionAttributeBase.Extend">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.PermissionAttributeBase.#ctor(System.Int32,System.Boolean,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="id">ID</param>
            <param name="disabled">是否禁用</param>
            <param name="extendJson">扩展属性JSON</param>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.RoutePermissionAssembly">
            <summary>
            路由权限程序集
            通过传入程序集数组，自动扫描带有RoutePermission和ActionPermission特性加入到路由权限控制数据里
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.RoutePermissionAssembly.routePermissions">
            <summary>
            路由权限信息数组
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.RoutePermissionAssembly.#ctor(System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.RoutePermissionAssembly.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.RoutePermissionAttribute">
            <summary>
            路由权限属性
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.RoutePermissionAttribute.code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionAttribute.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.RoutePermissionAttribute.#ctor(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="code">编码</param>
            <param name="id">ID</param>
            <param name="disabled">是否禁用</param>
            <param name="extendJson">扩展属性JSON</param>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.RoutePermissionCache">
            <summary>
            路由权限缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.RoutePermissionCache.confifgReader">
            <summary>
            配置读取
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.RoutePermissionCache.cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.RoutePermissionCache.syncCache">
            <summary>
            同步缓存
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.RoutePermissionCache.#ctor(Hzdtf.Utility.RoutePermission.IRoutePermissionConfigReader)">
            <summary>
            构造方法
            </summary>
            <param name="confifgReader">配置读取</param>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.RoutePermissionCache.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.RoutePermissionInfo">
            <summary>
            路由权限信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.Controller">
            <summary>
            控制
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.Disabled">
            <summary>
            是否禁用
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.Actions">
            <summary>
            动作数组
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.Extend">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.ActionInfo">
            <summary>
            动作信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.ActionInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.ActionInfo.Action">
            <summary>
            动作
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.ActionInfo.Codes">
            <summary>
            编码数组
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.ActionInfo.Disabled">
            <summary>
            是否禁用
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.ActionInfo.ResourceKey">
            <summary>
            资源键
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.RoutePermissionInfo.ActionInfo.Extend">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.RoutePermissionJson">
            <summary>
            路由权限Json
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.RoutePermission.RoutePermissionJson.jsonFile">
            <summary>
            Json文件
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.RoutePermissionJson.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">Json文件</param>
        </member>
        <member name="M:Hzdtf.Utility.RoutePermission.RoutePermissionJson.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="T:Hzdtf.Utility.RoutePermission.WrapRoutePermissionInfo">
            <summary>
            包装路由权限信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.RoutePermission.WrapRoutePermissionInfo.Config">
            <summary>
            配置
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Safety.DES">
            <summary>
            DES加密
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Safety.DES.key">
            <summary>
            KEY
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Safety.DES.iv">
            <summary>
            向量
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.DES.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.DES.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="key">KEY</param>
            <param name="iv">向量</param>
        </member>
        <member name="M:Hzdtf.Utility.Safety.DES.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plaintext">明文</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.DES.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="ciphertext ">密文</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Safety.DESUtil">
            <summary>
            DES辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.DESUtil.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plaintext">明文</param>
            <param name="key">KEY</param>
            <param name="iv">向量</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.DESUtil.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="ciphertext ">密文</param>
            <param name="key">KEY</param>
            <param name="iv">向量</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Safety.HashUtil">
            <summary>
            哈希辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.HashUtil.ConsistentHash(System.Byte[])">
            <summary>
            一致性哈希值
            </summary>
            <param name="digest">字节数组</param>
            <returns>哈希值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.HashUtil.ConsistentHashMD5(System.String)">
            <summary>
            一致性哈希值(MD5)
            </summary>
            <param name="text">文本</param>
            <returns>哈希值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Safety.IHash">
            <summary>
            哈希接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.IHash.GenerateHashCode(System.String)">
            <summary>
            生成哈希值
            </summary>
            <param name="key">键</param>
            <returns>哈希值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Safety.ISymmetricalEncryption">
            <summary>
            对称加密接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.ISymmetricalEncryption.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plaintext">明文</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.ISymmetricalEncryption.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="ciphertext ">密文</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Safety.SymmetricalEncryptionUtil">
            <summary>
            加密辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Safety.SymmetricalEncryptionUtil.DefaultSymmetricalEncryption">
            <summary>
            默认加密
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.SymmetricalEncryptionUtil.GetSymmetricalEncryption(Hzdtf.Utility.Safety.ISymmetricalEncryption)">
            <summary>
            获取加密，如果传入为空，则返回默认加密
            </summary>
            <param name="symmetricalEncryption">加密</param>
            <returns>加密</returns>
        </member>
        <member name="T:Hzdtf.Utility.Safety.MD5Hash">
            <summary>
            MD5哈希
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.MD5Hash.GenerateHashCode(System.String)">
            <summary>
            生成哈希值
            </summary>
            <param name="key">键</param>
            <returns>哈希值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Safety.MD5Util">
            <summary>
            MD5辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.MD5Util.Encryption32(System.String,System.Boolean)">
            <summary>
            加密（32位)
            </summary>
            <param name="plaintext">明文</param>
            <param name="isToLower">是否转换为小写</param>
            <returns>密文</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.MD5Util.Encryption16(System.String,System.Boolean)">
            <summary>
            加密（16位)
            </summary>
            <param name="plaintext">明文</param>
            <param name="isToLower">是否转换为小写</param>
            <returns>密文</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.MD5Util.GenerateMD5Bytes(System.String)">
            <summary>
            MD5流加密输出字节数组
            </summary>
            <param name="text">文本</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.MD5Util.GetBytesMD5(System.Byte[])">
            <summary>
            获取字节的MD5值
            </summary>
            <param name="bytes">字节流</param>
            <returns>字节的MD5值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.MD5Util.GetFileMD5(System.String)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件的MD5值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Safety.MD5Util.GetStreamMD5(System.IO.Stream,System.Boolean)">
            <summary>
            获取流的MD5值
            </summary>
            <param name="stream">流</param>
            <param name="isCloseStream">是否关闭流</param>
            <returns>流的MD5值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Safety.SignUtil">
            <summary>
            签名辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Safety.SignUtil.ComputeSignature(System.String,System.String)">
            <summary>
            计算签名
            </summary>
            <param name="key">KEY</param>
            <param name="data">数据</param>
            <returns>签名字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.SystemV2.LocalSystemClock">
            <summary>
            本地系统时钟
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.SystemV2.LocalSystemClock.UtcNow">
            <summary>
            UTC当前时间
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.TheOperation.ITheOperation">
            <summary>
            本次操作接口，通常是代表UI的一次一系列进行的操作
            比如在UI上添加一个数据，后台里进行一系列的处理，由多个处理完成，则代表一个TheOperation
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.TheOperation.ITheOperation.EventId">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.TheOperation.TheOperation">
            <summary>
            本次操作
            使用AsyncLocal进行存储，在本次操作范围内，最好不要跨线程，因为AsyncLocal是线程不安全
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.TheOperation.TheOperation.local">
            <summary>
            本地缓存
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.TheOperation.TheOperation.EventId">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.UserPermission.IUserMenuPermission`1">
            <summary>
            用户菜单权限接口
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.IUserMenuPermission`1.UserHavePermission(`0,System.String,System.String[],Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            用户是否拥有权限
            </summary>
            <param name="userId">用户ID</param>
            <param name="menuCode">菜单编码</param>
            <param name="funCodes">功能编码数组</param>
            <param name="comData">通用数据</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.UserPermission.IUserMenuPermissionCache`1">
            <summary>
            用户菜单权限缓存接口
            @ 黄振东
            </summary>
            <typeparam name="IdT">用户类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.IUserMenuPermissionCache`1.InitCache(`0,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            初始化缓存
            </summary>
            <param name="userId">用户ID</param>
            <param name="comData">通用数据</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.IUserMenuPermissionCache`1.GetWithTSNotAccessKeys(System.TimeSpan)">
            <summary>
            获取时间范围内没有访问的用户ID数组
            </summary>
            <param name="timeSpan">时间范围</param>
            <returns>时间范围内没有访问的用户ID数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.IUserMenuPermissionCache`1.RemoveWithTSNotAccess(System.TimeSpan)">
            <summary>
            移除时间范围内没有访问的用户
            </summary>
            <param name="timeSpan">时间范围</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="T:Hzdtf.Utility.UserPermission.IUserMenuReader`1">
            <summary>
            用户菜单读取接口
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.IUserMenuReader`1.GetHavePermissionMenuFunCodes(`0,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据用户ID获取拥有权限的菜单功能编码字典
            </summary>
            <param name="userId">用户ID</param>
            <param name="comData">通用数据</param>
            <returns>返回信息 key：菜单编码，value：功能编码数组</returns>
        </member>
        <member name="T:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermission`1">
            <summary>
            商户用户菜单权限接口
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermission`1.UserHavePermission(`0,`0,System.String,System.String[],Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            用户是否拥有权限
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <param name="menuCode">菜单编码</param>
            <param name="funCodes">功能编码数组</param>
            <param name="comData">通用数据</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermission`1.GetHavePermissionMenuFunCodes(`0,`0,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据用户ID获取拥有权限的菜单功能编码字典
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <param name="comData">通用数据</param>
            <returns>返回信息 key：菜单编码，value：功能编码数组</returns>
        </member>
        <member name="T:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermissionCache`1">
            <summary>
            商户用户菜单权限缓存接口
            @ 黄振东
            </summary>
            <typeparam name="IdT">用户类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermissionCache`1.InitCache(`0,`0,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            初始化缓存
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <param name="comData">通用数据</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermissionCache`1.GetWithTSNotAccessKeys(System.TimeSpan)">
            <summary>
            获取时间范围内没有访问的键数组
            </summary>
            <param name="timeSpan">时间范围</param>
            <returns>时间范围内没有访问的键数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermissionCache`1.RemoveWithTSNotAccess(System.TimeSpan)">
            <summary>
            移除时间范围内没有访问的用户
            </summary>
            <param name="timeSpan">时间范围</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermissionCache`1.RemoveCache(`0,`0)">
            <summary>
            根据商户ID和用户ID移除缓存
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermissionCache`1.RemoveCache(`0,`0[])">
            <summary>
            根据商户ID和用户ID移除缓存
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userIds">用户ID数组</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermissionCache`1.RemoveCache(Hzdtf.Utility.Model.KeyValueInfo{`0,`0}[])">
            <summary>
            根据商户ID和用户ID移除缓存
            </summary>
            <param name="merchantIdMapUserIds">商户ID映射用户ID，key：商户ID，value：用户ID</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuPermissionCache`1.ClearCache(`0)">
            <summary>
            根据商户ID清空缓存
            </summary>
            <param name="merchantId">商户ID</param>
            <returns>是否清空成功</returns>
        </member>
        <member name="T:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuReader`1">
            <summary>
            商户用户菜单读取接口
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.IMerchantUserMenuReader`1.GetHavePermissionMenuFunCodes(`0,`0,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据用户ID获取拥有权限的菜单功能编码字典
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <param name="comData">通用数据</param>
            <returns>返回信息 key：菜单编码，value：功能编码数组</returns>
        </member>
        <member name="T:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1">
            <summary>
            商户用户菜单本地缓存
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.dicCache">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.dicLastAccessTime">
            <summary>
            最后一次访问时间字典
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.syncDicCache">
            <summary>
            同步字典缓存
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.MerchantIdUserMenuReader">
            <summary>
            商户用户菜单读取
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.UserHavePermission(`0,`0,System.String,System.String[],Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            用户是否拥有权限
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <param name="menuCode">菜单编码</param>
            <param name="funCodes">功能编码数组</param>
            <param name="comData">通用数据</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.GetHavePermissionMenuFunCodes(`0,`0,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据用户ID获取拥有权限的菜单功能编码字典
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <param name="comData">通用数据</param>
            <returns>返回信息 key：菜单编码，value：功能编码数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.GetWithTSNotAccessKeys(System.TimeSpan)">
            <summary>
            获取时间范围内没有访问的键数组
            </summary>
            <param name="timeSpan">时间范围</param>
            <returns>时间范围内没有访问的键数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.RemoveWithTSNotAccess(System.TimeSpan)">
            <summary>
            移除时间范围内没有访问的用户
            </summary>
            <param name="timeSpan">时间范围</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.Add(System.String,System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            添加
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.InitCache(`0,`0,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            初始化缓存
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <param name="comData">通用数据</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.RemoveCache(`0,`0)">
            <summary>
            根据商户ID和用户ID移除缓存
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.RemoveCache(`0,`0[])">
            <summary>
            根据商户ID和用户ID移除缓存
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userIds">用户ID数组</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.RemoveCache(Hzdtf.Utility.Model.KeyValueInfo{`0,`0}[])">
            <summary>
            根据商户ID和用户ID移除缓存
            </summary>
            <param name="merchantIdMapUserIds">商户ID映射用户ID，key：商户ID，value：用户ID</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.ClearCache(`0)">
            <summary>
            根据商户ID清空缓存
            </summary>
            <param name="merchantId">商户ID</param>
            <returns>是否清空成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.Remove(System.String)">
            <summary>
            移除键
            </summary>
            <param name="key">键</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.Remove(System.String[])">
            <summary>
            移除键数组
            </summary>
            <param name="keys">键数组</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.Merchant.MerchantUserMenuLocalCache`1.GetKey(`0,`0)">
            <summary>
            获取键
            </summary>
            <param name="merchantId">商户ID</param>
            <param name="userId">用户ID</param>
            <returns>键</returns>
        </member>
        <member name="T:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1">
            <summary>
            用户菜单本地缓存
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.dicCache">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.dicLastAccessTime">
            <summary>
            最后一次访问时间字典
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.syncDicCache">
            <summary>
            同步字典缓存
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.UserMenuReader">
            <summary>
            用户菜单读取
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.UserHavePermission(`0,System.String,System.String[],Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            用户是否拥有权限
            </summary>
            <param name="userId">用户ID</param>
            <param name="menuCode">菜单编码</param>
            <param name="funCodes">功能编码数组</param>
            <param name="comData">通用数据</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.GetWithTSNotAccessKeys(System.TimeSpan)">
            <summary>
            获取时间范围内没有访问的用户ID数组
            </summary>
            <param name="timeSpan">时间范围</param>
            <returns>时间范围内没有访问的用户ID数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.RemoveWithTSNotAccess(System.TimeSpan)">
            <summary>
            移除时间范围内没有访问的用户
            </summary>
            <param name="timeSpan">时间范围</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.Add(`0,System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            添加
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.InitCache(`0,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            初始化缓存
            </summary>
            <param name="userId">用户ID</param>
            <param name="comData">通用数据</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.Remove(`0)">
            <summary>
            移除键
            </summary>
            <param name="key">键</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.Remove(`0[])">
            <summary>
            移除键数组
            </summary>
            <param name="keys">键数组</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="M:Hzdtf.Utility.UserPermission.UserMenuLocalCache`1.GetSyncCache">
            <summary>
            获取同步的缓存对象，是为了线程安全
            </summary>
            <returns>同步的缓存对象</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.AuthUtil">
            <summary>
            身份认证辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Utils.AuthUtil.AUTH_KEY">
            <summary>
            授权key，值是：Authorization
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Utils.AuthUtil.COOKIE_AUTH_KEY">
            <summary>
            Cookie授权Key，值是：AccessToken
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.AuthUtil.AddBearerToken(System.String)">
            <summary>
            添加Bearer票据
            </summary>
            <param name="originalToken">原始票据</param>
            <returns>添加Bearer票据后的票据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.AuthUtil.GetBearerOriginalToken(System.String)">
            <summary>
            获取Beaer原始票据
            </summary>
            <param name="bearerToken">带有Bearer的票据</param>
            <returns>Beaer原始票据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.AuthUtil.IsContainerBearer(System.String)">
            <summary>
            判断票据是否包含了Bearer
            </summary>
            <param name="token">票据</param>
            <returns>票据是否包含了Bearer</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.BashCommandUtil">
            <summary>
            Bash命令辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.BashCommandUtil.ExecBashCommand(System.String)">
            <summary>
            执行Bash命令
            </summary>
            <param name="command">命令</param>
            <returns>输出返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.BashCommandUtil.ExecBashCommand(System.String[])">
            <summary>
            执行Bash命令
            </summary>
            <param name="commands">命令数组</param>
            <returns>输出返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.BashCommandUtil.ExecBashCommand(System.String[],System.String@)">
            <summary>
            执行Bash命令
            </summary>
            <param name="commands">命令数组</param>
            <param name="err">错误</param>
            <returns>输出返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.BashCommandUtil.ExecBashCommand(System.String,System.String@)">
            <summary>
            执行Bash命令
            </summary>
            <param name="command">命令</param>
            <param name="err">错误</param>
            <returns>输出返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.BashCommandUtil.ExecDotnetCommand(System.String,System.String@)">
            <summary>
            执行dotnet命令
            </summary>
            <param name="command">命令</param>
            <param name="err">错误</param>
            <returns>输出返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.BashCommandUtil.ExecCommand(System.String,System.String,System.String@)">
            <summary>
            执行文件命令
            </summary>
            <param name="fileName">文件</param>
            <param name="command">命令</param>
            <param name="err">错误</param>
            <returns>输出返回值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.ClaimUtil">
            <summary>
            证件单元辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ClaimUtil.Add(System.Collections.Generic.IList{System.Security.Claims.Claim},System.String,System.String)">
            <summary>
            添加证件单元到列表里，忽略空值
            </summary>
            <param name="claims">证件单元列表</param>
            <param name="type">类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ClaimUtil.Get(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            根据键获取证件单元值，忽略空值
            </summary>
            <param name="claims">证件单元列表</param>
            <param name="type">类型</param>
            <returns>证件单元值</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.CollectionUtil">
            <summary>
            收藏辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.IsNullOrCount0``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            判断收藏是否为null或长度是否为0
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="collection">收藏</param>
            <returns>列表是否为null或长度是否为0</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.IsNullOrLength0``1(``0[])">
            <summary>
            判断数组是否为null或长度是否为0
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">数组</param>
            <returns>列表是否为null或长度是否为0</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.IsNullOrCount0``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            判断字典是否为null或长度是否为0
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
            <param name="dic">字典</param>
            <returns>字典是否为null或长度是否为0</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取字典的值，如果未找到，则返回ValueT默认值
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
            <param name="dic">字典</param>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>字典的值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ToArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            将列表转换为数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="list">列表</param>
            <returns>数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ValuesToList``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            将字典值转换为列表
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
            <param name="dic">字典</param>
            <returns>列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.Comparer{``0},System.Action{``0})">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="list">列表</param>
            <param name="itemAction">子项动作</param>
            <param name="comparer">比较</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            根据键获取值
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
            <param name="dic">字典</param>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.Merge``1(``0[],``0[])">
            <summary>
            合并数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array1">数组1</param>
            <param name="array2">数组2</param>
            <returns>合并后的数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ToObject``2(System.Collections.Generic.IDictionary{System.String,``1})">
            <summary>
            字典转换为对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <typeparam name="ValueT">字典值类型</typeparam>
            <param name="dic">字典</param>
            <returns>对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ToMergeString``1(``0[],System.String)">
            <summary>
            将数组按分隔符组合字符串
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <param name="split">分隔符</param>
            <returns>组合后的字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ToMergeString``1(``0[],System.String,System.String)">
            <summary>
            将数组按分隔符组合字符串
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <param name="split">分隔符</param>
            <param name="bothSides">两边符号</param>
            <returns>组合后的字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.RemoveKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            移除键
            </summary>
            <typeparam name="KeyT">键类型</typeparam>
            <typeparam name="ValueT">值类型</typeparam>
            <param name="dic">字典</param>
            <param name="key">键</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ToList``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            将收藏转换为列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">收藏</param>
            <returns>列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.Reverse``1(System.Collections.Generic.ICollection{``0},System.Func{System.Int32,System.Collections.Generic.ICollection{``0}})">
            <summary>
            将收藏的各元素进行反转
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">收藏</param>
            <param name="createCollectionFunc">创建收藏回调，如果为null，默认为创建List</param>
            <returns>反转后的收藏</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.Reverse``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>
            将列表的各元素进行反转
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <param name="createListFunc">创建列表回调，如果为null，默认为创建List</param>
            <returns>反转后的列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.Reverse``1(``0[])">
            <summary>
            将数组的各元素进行反转
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <returns>反转后的数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.GetValueByIndex``1(``0[],System.Int32)">
            <summary>
            根据索引获取值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <param name="index">索引</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.GetValueByIndex``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            根据索引获取值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <param name="index">索引</param>
            <returns>值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.Remove``1(``0[],``0,System.Func{``0,System.Boolean})">
            <summary>
            移除指定的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <param name="value">值</param>
            <param name="compact">比较回调</param>
            <returns>新的数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.Remove(System.Int32[],System.Int32)">
            <summary>
            移除指定的值
            </summary>
            <param name="array">数组</param>
            <param name="value">值</param>
            <returns>新的数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.Remove(System.String[],System.String)">
            <summary>
            移除指定的值
            </summary>
            <param name="array">数组</param>
            <param name="value">值</param>
            <returns>新的数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ArrayToString``1(``0[])">
            <summary>
            将数组里的值转换为数组字符串
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <returns>数组字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ArrayToLong(System.String[])">
            <summary>
            将字符串数组转换为长整型数组
            </summary>
            <param name="array">字符串数组</param>
            <returns>长整型数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ListToString``1(System.Collections.Generic.IList{``0})">
            <summary>
            将列表里的值转换为列表字符串
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <returns>列表字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.CollectionUtil.ListToLong(System.Collections.Generic.IList{System.String})">
            <summary>
            将字符串列表转换为长整型列表
            </summary>
            <param name="list">字符串列表</param>
            <returns>长整型列表</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.DataTableUtil">
            <summary>
            数据表辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.DataTableUtil.ToDataTable``1(System.Collections.Generic.IList{``0},System.String,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            将列表转换为数据表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <param name="tableName">表名</param>
            <param name="eachPropertyFunc">循环属性函数</param>
            <returns>数据表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.DataTableUtil.ToList``1(System.Data.DataTable,System.Func{``0,System.Data.DataRow,System.Int32,System.Boolean})">
            <summary>
            将列表转换为数据表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="dataTable">数据表</param>
            <param name="eachRowFun">循环每一行的回调</param>
            <returns>列表</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.ExcelUtil">
            <summary>
            Excel辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToExcelFile(System.Collections.Generic.IList{System.IO.TextReader},System.String,System.String,System.Boolean)">
            <summary>
            输出Excel文件
            </summary>
            <param name="list">列表</param>
            <param name="fileName">文件名</param>
            <param name="sheetName">工作表名</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToExcelFile(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            输出Excel文件
            </summary>
            <param name="dt">数据表</param>
            <param name="fileName">文件名</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToExcelBytes``1(System.Collections.Generic.IList{``0},System.String,System.Boolean,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            输出Excel字节数组
            </summary>
            <param name="list">列表</param>
            <param name="sheetName">工作表名称</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <param name="eachPropertyFunc">循环属性函数</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToExcelBytes(System.Data.DataTable,System.Boolean)">
            <summary>
            输出Excel字节数组
            </summary>
            <param name="dt">数据表</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToExcelBytes(System.Data.DataTable[],System.Boolean)">
            <summary>
            输出Excel字节数组
            </summary>
            <param name="dts">数据表集合</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToExcelStream(System.Data.DataTable,System.Boolean)">
            <summary>
            输出Excel内存流
            </summary>
            <param name="dt">数据表</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <returns>内存流</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToExcelStream(System.Data.DataTable[],System.Boolean)">
            <summary>
            输出Excel内存流
            </summary>
            <param name="dts">数据表集合</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <returns>内存流</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToDataTableFromExcelFile(System.String,System.String,System.Boolean)">
            <summary>
            从Excel文件读取并转换到数据表
            </summary>
            <param name="fileName">文件名</param>
            <param name="sheetName">工作表名</param>
            <param name="isFirstRowColumn">是否第1行列名</param>
            <returns>数据表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToListFromExcelFile``1(System.String,System.String,System.Boolean,System.Func{``0,System.Data.DataRow,System.Int32,System.Boolean})">
            <summary>
            从Excel文件读取并转换到列表
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="fileName">文件名</param>
            <param name="sheetName">工作表名</param>
            <param name="isFirstRowColumn">是否第1行列名</param>
            <param name="eachRowFun">循环每一行的回调</param>
            <returns>列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.IsExcelGeV2007(System.String)">
            <summary>
            Excel判断是否大于或等于2007版本
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否大于或等于2007版本</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToListFromExcelStream``1(System.IO.Stream,System.Boolean,System.String,System.Boolean,System.Func{``0,System.Data.DataRow,System.Int32,System.Boolean})">
            <summary>
            从Excel流读取并转换到列表
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="stream">流</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <param name="sheetName">工作表名</param>
            <param name="isFirstRowColumn">是否第1行列名</param>
            <param name="eachRowFun">循环每一行的回调</param>
            <returns>列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToDataTableFromExcelStream(System.IO.Stream,System.Boolean,System.String,System.Boolean)">
            <summary>
            从Excel流读取并转换到数据表
            </summary>
            <param name="stream">流</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <param name="sheetName">工作表名</param>
            <param name="isFirstRowColumn">是否第1行列名</param>
            <returns>数据表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ToDataTablesFromExcelStream(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Boolean},System.Boolean)">
            <summary>
            从Excel流读取并转换到数据表数组
            </summary>
            <param name="stream">流</param>
            <param name="sheetNameMapFirstRowColumn">工作表名映射是否第1行列名字典</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <returns>数据表数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ReaderExcelStream``1(System.IO.Stream,System.Func{NPOI.SS.UserModel.IWorkbook,``0},System.Boolean)">
            <summary>
            读取Excel流
            </summary>
            <param name="stream">Excel流</param>
            <param name="callback">读取到工作薄回调</param>
            <param name="isGeV2007">是否大于或等于2007版本</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ExcelUtil.ReaderSheetToDataTable(NPOI.SS.UserModel.ISheet,System.Boolean)">
            <summary>
            读取工作表并转换为数据表
            </summary>
            <param name="sheet">工作表</param>
            <param name="isFirstRowColumn">是否第1行列名</param>
            <returns>数据表</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.EntityExcelInfo">
            <summary>
            实体Excel信息
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Utils.EntityExcelInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Utils.EntityExcelInfo.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Utils.EntityExcelInfo.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Utils.EntityExcelInfo.Convert">
            <summary>
            转换
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Utils.EntityExcelComparer">
            <summary>
            实体Excel比较
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Utils.FileUtil">
            <summary>
            文件辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.FileUtil.FileExpandName(System.String)">
            <summary>
            获取文件扩展名
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件扩展名</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.FileUtil.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.FileUtil.ToUrlFilePath(System.String,System.String,System.String)">
            <summary>
            转换为URL文件路径
            </summary>
            <param name="fileName">文件名</param>
            <param name="domainUrl">域名URL</param>
            <param name="folder">文件夹</param>
            <returns>URL文件路径</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.FileUtil.ToPhysicsFilePath(System.String,System.String,System.Boolean)">
            <summary>
            转换为物理文件路径
            </summary>
            <param name="fileUrl">文件URL</param>
            <param name="domainUrl">域名URL</param>
            <param name="isReplaceBackslash">是否替换反斜杠</param>
            <returns>物理文件路径</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.FileUtil.CreateNotExistsDirectory(System.String)">
            <summary>
            创建文件夹，如果文件夹存在则忽略
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.FileUtil.DeleteDirectory(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="T:Hzdtf.Utility.Utils.ImageUtil">
            <summary>
            图片辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Utils.ImageUtil.helper">
            <summary>
            安全验证码帮助对象
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ImageUtil.CreateCodeImg(System.String)">
            <summary>
             创建验证码图片流（仅限于Windows平台）
             </summary>
             <param name="checkCode">验证码字符串</param>
             <returns>返回验证码图片流</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ImageUtil.CreateCrossPlatformCodeImg(System.String)">
            <summary>
             创建跨平台的验证码图片字节数组
             验证图片使用的是Hei.Captcha组件，必须要把Fonts字体文件夹拷贝到站点根目录下（注意：非wwwroot下）
             </summary>
             <param name="checkCode">验证码字符串</param>
             <returns>返回验证码图片字节数组</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.NetworkUtil">
            <summary>
            网络辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NetworkUtil.InternetGetConnectedState(System.Int32@,System.Int32)">
            <summary>
            网络连接状态
            </summary>
            <param name="connectionDescription">连接描述</param>
            <param name="reservedValue">返回值</param>
            <returns>是否连接</returns>
        </member>
        <member name="F:Hzdtf.Utility.Utils.NetworkUtil.syncLocalIP">
            <summary>
            同步本地IP
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Utils.NetworkUtil.localIP">
            <summary>
            本地IP
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.Utils.NetworkUtil.LocalIP">
            <summary>
            本地IP
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NetworkUtil.SetLocalIP(System.String)">
            <summary>
            设置本地IP
            </summary>
            <param name="localIP">本地IP</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NetworkUtil.IsNetConnected">
            <summary>
            判断网络是否已连接
            </summary>
            <returns>网络是否已连接</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NetworkUtil.GetPortFromDomain(System.String)">
            <summary>
            从域名获取端口，如果是合格的域名，没有指定端口，默认http返回80，https返回443
            </summary>
            <param name="domain">域名</param>
            <returns>端口</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NetworkUtil.FilterUrl(System.String)">
            <summary>
            过滤URL，将带有*或[::]替换为本地IP
            </summary>
            <param name="url">URL</param>
            <returns>过滤后的URL</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NetworkUtil.IsPingSuccess(System.String)">
            <summary>
            是否能ping通
            </summary>
            <param name="hostNameOrAddress">主机名或地址</param>
            <returns>是否能ping通</returns>
        </member>
        <member name="F:Hzdtf.Utility.Utils.NetworkUtil.DEFAULT_HTTP_CLIENT_NAME">
            <summary>
            默认HTTP客户端名称
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.Utils.NumberUtil">
            <summary>
            数字辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Utils.NumberUtil.ran">
            <summary>
            随机对象
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Utils.NumberUtil.ascVals">
            <summary>
            ASC码值数组
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NumberUtil.FenToYuan(System.Nullable{System.Int64})">
            <summary>
            分转换为元
            </summary>
            <param name="fen">分</param>
            <returns>元</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NumberUtil.FenToYuan(System.Int64)">
            <summary>
            分转换为元
            </summary>
            <param name="fen">分</param>
            <returns>元</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NumberUtil.Random(System.Int32)">
            <summary>
            随机生成数字字符串
            </summary>
            <param name="length">长度</param>
            <returns>随机数字字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NumberUtil.EnNumRandom(System.Int32)">
            <summary>
            随机生成英文数字字符串
            </summary>
            <param name="length">长度</param>
            <returns>英文数字字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NumberUtil.FixedLengthString(System.Int32,System.Byte)">
            <summary>
            生成固定长度的字符串
            如果不足长度则前面补0
            </summary>
            <param name="num">数字</param>
            <param name="length">长度</param>
            <returns>固定长度的字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NumberUtil.CodeAndToMask(System.Int32[])">
            <summary>
            编码进行与运算转换为掩码
            </summary>
            <param name="code">编码</param>
            <returns>掩码</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NumberUtil.IsCodeOrMaskEqual(System.Int32,System.Int32)">
            <summary>
            将数字对掩码进行或运算并得到是否匹配
            </summary>
            <param name="mask">掩码</param>
            <param name="code">编码</param>
            <returns>数字对掩码进行或运算并得到是否匹配</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.NumberUtil.ToLong(System.String)">
            <summary>
            将字符串转换为长整型数字，如果字符串为空，则默认返回0。其他非长整型转换会发生异常
            </summary>
            <param name="longStr">长整型字符串</param>
            <returns>长整型数字</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.PagingUtil">
            <summary>
            分页辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.PagingUtil.PageCount(System.Int32,System.Int32)">
            <summary>
            计算分页总数
            </summary>
            <param name="pageSize">每页记录数</param>
            <param name="total">总数</param>
            <returns>分页总数</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.PagingUtil.PageStartEnd(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算分页开始结束数
            </summary>
            <param name="pageIndex">页码，从0开始</param>
            <param name="pageSize">每页记录数</param>
            <param name="baseStartNum">基层开始数</param>
            <returns>分页开始结束数</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.PagingUtil.ExecPage``1(System.Int32,System.Int32,System.Func{System.Int32},System.Func{System.Collections.Generic.IList{``0}})">
            <summary>
            按指定数据类型执行分页函数
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="countFunc">统计数函数</param>
            <param name="selectPageFunc">查询分页函数</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.PagingUtil.ForPage(System.Func{System.Int32,System.Int32,System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            循环分页
            </summary>
            <param name="callback">回调。0：页码，1：每页记录数，2：返回总页数</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="maxForCount">最大循环次数</param>
        </member>
        <member name="T:Hzdtf.Utility.Utils.RuntimeUtil">
            <summary>
            运行时辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.RuntimeUtil.GetAllAssemblies">
            <summary>
            获取项目程序集，排除所有的系统程序集(Microsoft.***、System.***等)、Nuget下载包
            </summary>
            <returns>程序集列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.RuntimeUtil.GetAssembly(System.String)">
            <summary>
            根据程序集名获取程序集
            </summary>
            <param name="assemblyName">程序集名</param>
            <returns>程序集</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.RuntimeUtil.GetAllTypes">
            <summary>
            获取所有类型列表
            </summary>
            <returns>类型列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.RuntimeUtil.GetTypesByAssembly(System.String)">
            <summary>
            根据程序集名获取类型列表
            </summary>
            <param name="assemblyName">程序集名</param>
            <returns>类型列表</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.RuntimeUtil.GetImplementType(System.String,System.Type)">
            <summary>
            根据类型名和接口类型获取类型
            </summary>
            <param name="typeName">类型名</param>
            <param name="baseInterfaceType">接口类型</param>
            <returns>类型</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.SqlUtil">
            <summary>
            SQL辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.SqlUtil.FillSqlValue(System.String)">
            <summary>
            过滤SQL值
            </summary>
            <param name="value">值</param>
            <returns>过滤后的SQL值</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.SqlUtil.CreateWhereSql">
            <summary>
            创建where语句，初始化内容(包含前面空格)：" WHERE (1=1) "
            </summary>
            <returns>where语句</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.SqlUtil.JoinSelectPropMapFields(System.String[],System.String,System.Boolean)">
            <summary>
            连接查询的属性映射字段集合
            带有,号
            </summary>
            <param name="propFields">属性字段集合，属性与字段用空格分隔</param>
            <param name="pfx">前辍</param>
            <param name="ignoreId">是否过滤ID</param>
            <returns>连接后的查询的属性映射字段集合</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.SqlUtil.GetMaskSql(System.Int32,System.String,System.Boolean)">
            <summary>
            获取匹配掩码SQL
            </summary>
            <param name="code">编码</param>
            <param name="field">字段</param>
            <param name="isEqual">是否匹配，默认为是</param>
            <returns>掩码SQL</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.SqlUtil.GetLikeSql(System.String,Hzdtf.Utility.Enums.LikeMode)">
            <summary>
            获取Like SQL语句
            </summary>
            <param name="value">值</param>
            <param name="mode">模式</param>
            <returns>Like SQL语句</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.StreamUtil">
            <summary>
            流辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Utils.StreamUtil.syncDicObject">
            <summary>
            同步字典对象
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Utils.StreamUtil.syncDicFileName">
            <summary>
            同步文件名字典,key:文件名,value:同步对象
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderFileContent(System.String,System.Boolean)">
            <summary>
            根据文件名读取文件内容
            </summary>
            <param name="fileName">文件名</param>
            <param name="outOfProcessLock">是否跨进程锁</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderFileContent(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            根据文件名读取文件内容
            </summary>
            <param name="fileName">文件名</param>
            <param name="encoding">编码</param>
            <param name="outOfProcessLock">是否跨进程锁</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderFileStream(System.String,System.Boolean)">
            <summary>
            根据文件名读取字节数组
            </summary>
            <param name="fileName">文件名</param>
            <param name="outOfProcessLock">是否跨进程锁</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderStreamToString(System.IO.Stream,System.Boolean)">
            <summary>
            读取流并转换为字符串
            </summary>
            <param name="stream">流</param>
            <param name="isCloseStream">是否关闭流</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderStreamToString(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            读取流并转换为字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码</param>
            <param name="isCloseStream">是否关闭流</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderStream(System.IO.Stream,System.Boolean)">
            <summary>
            读取流
            </summary>
            <param name="stream">流</param>
            <param name="isCloseStream">是否关闭流</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderInsideAsyncStreamToString(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            读取内部异步流并转换为字符串
            </summary>
            <param name="stream">流</param>
            <param name="isCloseStream">是否关闭流</param>
            <param name="initLength">初始化长度</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderInsideAsyncStreamToString(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            读取内部异步流并转换为字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码</param>
            <param name="isCloseStream">是否关闭流</param>
            <param name="initLength">初始化长度</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReaderInsideAsyncStream(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            读取内部异步流
            </summary>
            <param name="stream">流</param>
            <param name="isCloseStream">是否关闭流</param>
            <param name="initLength">初始化长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.WriteFileContent(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            写入文件内容
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">内容</param>
            <param name="append">是否追加</param>
            <param name="outOfProcessLock">是否跨进程锁</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.WriteFileStream(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            写入文件流
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">内容字节数组</param>
            <param name="append">是否追加</param>
            <param name="outOfProcessLock">是否跨进程锁</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.OperationFile(System.String,System.Action{System.String},System.Boolean)">
            <summary>
            操作文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="operAction">操作动作回调</param>
            <param name="outOfProcessLock">是否跨进程锁</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.GetSyncFileObject(System.String)">
            <summary>
            获取文件的同步对象
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件的同步对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.RemoveSyncFileObject(System.String)">
            <summary>
            移除文件同步对象
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.WriteFileContent(System.String,System.String,System.Boolean)">
            <summary>
            写入文件内容
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">内容</param>
            <param name="append">是否追加</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.WriteFileStream(System.String,System.Byte[],System.Boolean)">
            <summary>
            写入文件流
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">内容字节数组</param>
            <param name="append">是否追加</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ConvertBytes``1(``0)">
            <summary>
            将数据转换为字节流
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <returns>字节流</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ConvertData``1(System.Byte[])">
            <summary>
            将字节流转换为数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="dataBytes">字节流</param>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.WriteFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            写入文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="stream">流</param>
            <param name="outOfProcessLock">是否跨进程锁</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.WriteFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            写入文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="data">数据</param>
            <param name="outOfProcessLock">是否跨进程锁</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.GetFileLockName(System.String)">
            <summary>
            获取文件锁名
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件锁名</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.SerializeToStream(System.Object)">
            <summary>
            将对象序列化为二进制流，对象必须标识[Serializable]特性
            </summary>
            <param name="obj">对象</param>
            <returns>流</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.DeserializeToObject(System.IO.Stream)">
            <summary>
            将流反序列化为对象，对象必须标识[Serializable]特性
            </summary>
            <param name="stream">流</param>
            <returns>对象</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.WriteStream(System.String)">
            <summary>
            将字符串以utf8写入到流中
            </summary>
            <param name="str">字符串</param>
            <returns>流</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StreamUtil.ReadStringForWeb(System.IO.Stream,System.Boolean)">
            <summary>
            专门为web提供读取流并转换为字符串
            </summary>
            <param name="requestBody">请求流</param>
            <param name="isCloseStream">是否关闭流</param>
            <returns>字符串任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.StringUtil">
            <summary>
            字符串辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.ToDictionaryFromUrlParams(System.String)">
            <summary>
            从URL参数转换为字典
            </summary>
            <param name="url">URL</param>
            <returns>字典</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.Contains(System.String[],System.String,System.Boolean)">
            <summary>
            判断字符串是否在数组里
            </summary>
            <param name="strs">字符串数组</param>
            <param name="str">字符串</param>
            <param name="ignoreCase">忽略大小写</param>
            <returns>字符串是否在数组里</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.NewShortGuid">
            <summary>
            新建简短的GUID
            </summary>
            <returns>简短的GUID</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.FristUpper(System.String)">
            <summary>
            首位转换为大写
            </summary>
            <param name="str">字符串</param>
            <returns>首位转换为大写</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.FristLower(System.String)">
            <summary>
            首位转换为小写
            </summary>
            <param name="str">字符串</param>
            <returns>首位转换为小写</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.FristFunc(System.String,System.Func{System.String,System.String})">
            <summary>
            首位回调
            </summary>
            <param name="str">字符串</param>
            <param name="fristFun">首位回调</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.ParseGuid(System.String,System.String@,System.String)">
            <summary>
            解析GUID
            </summary>
            <param name="guidStr">GUID字符串</param>
            <param name="errMsg">错误消息</param>
            <param name="name">名称</param>
            <returns>GUID</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.NewGuidLong">
            <summary>  
            新建一个Guid唯一的长整型
            </summary>  
            <returns>Guid唯一的长整型</returns>  
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.ToLong(System.Guid)">
            <summary>  
            将GUID转换为唯一的长整型
            </summary>  
            <param name="guid">GUID</param>
            <returns>唯一的长整型</returns>  
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.JsonDeserialize``1(System.String,System.String@,System.String)">
            <summary>
            JSON反序列化对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="jsonStr">JSON字符串</param>
            <param name="errMsg">错误消息</param>
            <param name="name">名称</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="F:Hzdtf.Utility.Utils.StringUtil.dicHtmlRegexFlags">
            <summary>
            HTML正则标记字典
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.FilterHtml(System.String,System.Boolean,System.Boolean)">
            <summary>
            过滤HTML格式
            </summary>
            <param name="htmlString">HTML字符串</param>
            <param name="isFilterParagraph">是否过滤段落</param>
            <param name="isFilterSpace">是否过滤空格</param>
            <returns>过虑后的字符串</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.StringUtil.NullOutEmpty(System.String)">
            <summary>
            如果字符串为null，则输出空字符串
            </summary>
            <param name="str">字符串</param>
            <returns>如果字符串为null，则输出空字符串</returns>
        </member>
        <member name="T:Hzdtf.Utility.Utils.ValidateUtil">
            <summary>
            验证辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ValidateUtil.ValidateNullOrEmpty(System.String,System.String)">
            <summary>
            验证字符串是否为null或为空，如果是则抛出异常
            </summary>
            <param name="str">字符串</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ValidateUtil.ValidateNullOrEmpty2(System.String,System.String)">
            <summary>
            验证字符串是否为null或为空，如果是则抛出异常
            </summary>
            <param name="str">字符串</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ValidateUtil.ValidateNull(System.Object,System.String)">
            <summary>
            验证对象是否为null，如果是则抛出异常
            </summary>
            <param name="obj">对象</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.ValidateUtil.ValidateNull2(System.Object,System.String)">
            <summary>
            验证对象是否为null，如果是则抛出异常
            </summary>
            <param name="obj">对象</param>
            <param name="message">消息</param>
        </member>
        <member name="T:Hzdtf.Utility.Utils.XmlUtil">
            <summary>
            XML辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Utils.XmlUtil.IsNullOrCount0(System.Xml.XmlNodeList)">
            <summary>
            判断XML节点列表是否为null或数量是否为0
            </summary>
            <param name="xmlNodeList">XML节点列表</param>
            <returns>XML节点列表是否为null或数量是否为0</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.XmlUtil.IsNullOrChildrenCount0(System.Xml.XmlNode)">
            <summary>
            判断XML节点是否为null或子节点数是否为0
            </summary>
            <param name="xmlNode">XML节点</param>
            <returns>XML节点是否为null或子节点数是否为0</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.XmlUtil.GetChildNodeInnerTextByNode(System.Xml.XmlNode,System.String)">
            <summary>
            获取子节点文本
            </summary>
            <param name="node">节点</param>
            <param name="childNodeName">子节点名称</param>
            <returns>子节点文本</returns>
        </member>
        <member name="M:Hzdtf.Utility.Utils.XmlUtil.ForEach(System.Xml.XmlNodeList,System.Action{System.Xml.XmlNode})">
            <summary>
            循环XML节点列表
            </summary>
            <param name="xmlNodeList">XML节点列表</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:Hzdtf.Utility.Utils.XmlUtil.FindNodeList(System.Xml.XmlDocument,System.String,System.Action{System.Int32},System.Func{System.Xml.XmlNode,System.Int32,System.Boolean})">
            <summary>
            根据节点列表路径查找节点列表
            </summary>
            <param name="xmlDocument">XML文档对象</param>
            <param name="nodeListPath">节点列表路径</param>
            <param name="eurekaNumberAction">找到了数量动作</param>
            <param name="eurekaNodeFunc">找到了节点函数</param>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.ArrayNotEmptyValiParam">
            <summary>
            数组不为空验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.ArrayNotEmptyValiParam.ExecOper(System.Object,Hzdtf.Utility.Attr.ParamAttr.ArrayNotEmptyAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.IdValiParam">
            <summary>
            ID验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.IdValiParam.ExecOper(System.Object,Hzdtf.Utility.Attr.ParamAttr.IdAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.IValiParam">
            <summary>
            验证参数接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.IValiParam.Exec(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute,System.String)">
            <summary>
            执行验证
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.MaxLengthValiParam">
            <summary>
            最大长度验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.MaxLengthValiParam.ExecOper(System.Object,System.ComponentModel.DataAnnotations.MaxLengthAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.MinLengthValiParam">
            <summary>
            最小长度验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.MinLengthValiParam.ExecOper(System.Object,System.ComponentModel.DataAnnotations.MinLengthAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.ModelValiParam">
            <summary>
            模型验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.VaiParam.ModelValiParam.modelCom">
            <summary>
            模型组合验证
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.ModelValiParam.ExecOper(System.Object,Hzdtf.Utility.Attr.ParamAttr.ModelAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.MultiModelValiParam">
            <summary>
            多个模型验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.VaiParam.MultiModelValiParam.modelCom">
            <summary>
            模型组合验证
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.MultiModelValiParam.ExecOper(System.Object,Hzdtf.Utility.Attr.ParamAttr.MultiModelAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.PageIndexValiParam">
            <summary>
            页码验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.PageIndexValiParam.ExecOper(System.Object,Hzdtf.Utility.Attr.ParamAttr.PageIndexAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.PageSizeValiParam">
            <summary>
            每页记录数验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.PageSizeValiParam.ExecOper(System.Object,Hzdtf.Utility.Attr.ParamAttr.PageSizeAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.RangeValiParam">
            <summary>
            范围验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.RangeValiParam.ExecOper(System.Object,System.ComponentModel.DataAnnotations.RangeAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.RequiredValiParam">
            <summary>
            不为空验证参数
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.RequiredValiParam.ExecOper(System.Object,System.ComponentModel.DataAnnotations.RequiredAttribute,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.VaiParam.ValiParamBase`1">
            <summary>
            验证参数基类
            @ 黄振东
            </summary>
            <typeparam name="ValiAttrT">验证特性类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.ValiParamBase`1.Exec(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute,System.String)">
            <summary>
            执行验证
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="M:Hzdtf.Utility.VaiParam.ValiParamBase`1.ExecOper(System.Object,`0,System.String)">
            <summary>
            执行操作
            </summary>
            <param name="value">值</param>
            <param name="valiAttr">验证特性</param>
            <param name="displayName">显示名</param>
            <returns>错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.ArrayNotEmptyVali">
            <summary>
            数组不为空验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.ArrayNotEmptyVali.Exec(System.Object[],System.Byte)">
            <summary>
            执行
            </summary>
            <param name="param">参数</param>
            <param name="paramIndex">参数索引位置</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.IdVali">
            <summary>
            ID验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.IdVali.Exec(System.Object[],System.Byte)">
            <summary>
            执行
            </summary>
            <param name="param">参数</param>
            <param name="paramIndex">参数索引位置</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.IValiHandler">
            <summary>
            验证处理接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.IValiHandler.Exec(System.Object[],System.Byte)">
            <summary>
            执行
            </summary>
            <param name="param">参数</param>
            <param name="paramIndex">模型参数索引位置</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.ModelComVali">
            <summary>
            模型组合验证
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Vali.ModelComVali.modelValis">
            <summary>
            模型验证列表
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.ModelComVali.Exec(System.Object[],System.Byte)">
            <summary>
            执行
            </summary>
            <param name="param">参数</param>
            <param name="paramIndex">参数索引位置</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Vali.ModelComVali.AppendModelVali(Hzdtf.Utility.Vali.Model.IModelVali)">
            <summary>
            追加模型验证
            </summary>
            <param name="modelVali">模型验证</param>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.IModelVali">
            <summary>
            模型验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.IModelVali.Vali(System.Object)">
            <summary>
            验证
            </summary>
            <param name="model">模型</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.ModelPropsVali">
            <summary>
            模型属性集合验证
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Vali.Model.ModelPropsVali.propValis">
            <summary>
            属性验证集合
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.ModelPropsVali.Vali(System.Object)">
            <summary>
            验证
            </summary>
            <param name="model">模型</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.Prop.CompareVali">
            <summary>
            范围验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.Prop.CompareVali.ExecVali(System.Object,System.Object,System.String,System.ComponentModel.DataAnnotations.CompareAttribute)">
            <summary>
            执行验证
            </summary>
            <param name="model">模型</param>
            <param name="value">值</param>
            <param name="displayName">显示名称</param>
            <param name="valiAttr">验证特性</param>
            <returns>基本错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.Prop.IPropVali">
            <summary>
            属性验证接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.Prop.IPropVali.Vali(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            验证
            </summary>
            <param name="model">模型</param>
            <param name="property">属性</param>
            <param name="value">值</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.Prop.MaxLengthVali">
            <summary>
            最大长度验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.Prop.MaxLengthVali.ExecVali(System.Object,System.Object,System.String,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
            <summary>
            执行验证
            </summary>
            <param name="model">模型</param>
            <param name="value">值</param>
            <param name="displayName">显示名称</param>
            <param name="valiAttr">验证特性</param>
            <returns>基本错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.Prop.MinLengthVali">
            <summary>
            最小长度验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.Prop.MinLengthVali.ExecVali(System.Object,System.Object,System.String,System.ComponentModel.DataAnnotations.MinLengthAttribute)">
            <summary>
            执行验证
            </summary>
            <param name="model">模型</param>
            <param name="value">值</param>
            <param name="displayName">显示名称</param>
            <param name="valiAttr">验证特性</param>
            <returns>基本错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.Prop.PropValiBase`1">
            <summary>
            属性验证基类
            @ 黄振东
            </summary>
            <typeparam name="ValiAttrT">验证特性类型</typeparam>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.Prop.PropValiBase`1.Vali(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            验证
            </summary>
            <param name="model">模型</param>
            <param name="property">属性</param>
            <param name="value">值</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.Prop.PropValiBase`1.ExecVali(System.Object,System.Object,System.String,`0)">
            <summary>
            执行验证
            </summary>
            <param name="model">模型</param>
            <param name="value">值</param>
            <param name="displayName">显示名称</param>
            <param name="valiAttr">验证特性</param>
            <returns>基本错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.Prop.RangeVali">
            <summary>
            范围验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.Prop.RangeVali.ExecVali(System.Object,System.Object,System.String,System.ComponentModel.DataAnnotations.RangeAttribute)">
            <summary>
            执行验证
            </summary>
            <param name="model">模型</param>
            <param name="value">值</param>
            <param name="displayName">显示名称</param>
            <param name="valiAttr">验证特性</param>
            <returns>基本错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.Model.Prop.RequiredVali">
            <summary>
            不为空验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.Model.Prop.RequiredVali.ExecVali(System.Object,System.Object,System.String,System.ComponentModel.DataAnnotations.RequiredAttribute)">
            <summary>
            执行验证
            </summary>
            <param name="model">模型</param>
            <param name="value">值</param>
            <param name="displayName">显示名称</param>
            <param name="valiAttr">验证特性</param>
            <returns>基本错误消息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.MultiModelVali">
            <summary>
            多个模型验证
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Vali.MultiModelVali.modelComVali">
            <summary>
            模型组合验证
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.MultiModelVali.Exec(System.Object[],System.Byte)">
            <summary>
            执行
            </summary>
            <param name="param">参数</param>
            <param name="paramIndex">参数索引位置</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.PageIntVali">
            <summary>
            分页值验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.PageIntVali.Exec(System.Object[],System.Byte)">
            <summary>
            执行
            </summary>
            <param name="param">参数</param>
            <param name="paramIndex">参数索引位置</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:Hzdtf.Utility.Vali.ParamsModelVali">
            <summary>
            可变参数模型验证
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.Vali.ParamsModelVali.modelComVali">
            <summary>
            模型组合验证
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.Vali.ParamsModelVali.Exec(System.Object[],System.Byte)">
            <summary>
            执行
            </summary>
            <param name="param">参数</param>
            <param name="paramIndex">参数索引位置</param>
            <returns>返回信息</returns>
        </member>
        <member name="T:System.Linq.OrderbyExtensions">
            <summary>
            排序扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="query">查询表达式</param>
            <param name="fieldMapSortTypes">字段映射排序类型字典</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.IDictionary{System.String,Hzdtf.Utility.Enums.SortType})">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="query">查询表达式</param>
            <param name="fieldMapSortTypes">字段映射排序类型字典</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="query">查询表达式</param>
            <param name="field">字段</param>
            <param name="orderBy">排序类型</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.ThenOrderBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            第二排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="query">查询表达式</param>
            <param name="field">字段</param>
            <param name="orderBy">排序类型</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,Hzdtf.Utility.Enums.SortType)">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="query">查询表达式</param>
            <param name="field">字段</param>
            <param name="sortType">排序类型</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.ThenOrderBy``1(System.Linq.IQueryable{``0},System.String,Hzdtf.Utility.Enums.SortType)">
            <summary>
            第二排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="query">查询表达式</param>
            <param name="field">字段</param>
            <param name="sortType">排序类型</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.ExecOrderBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            第二排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="query">查询表达式</param>
            <param name="field">字段</param>
            <param name="orderMethod">排序方法</param>
            <returns>查询表达式</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.GetPropertyInfo(System.Type,System.String)">
            <summary>
            获取反射
            </summary>
            <param name="objType">对象类型</param>
            <param name="name">名称</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.GetOrderExpression(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            获取生成表达式
            </summary>
            <param name="objType">对象类型</param>
            <param name="pi">属性信息</param>
            <returns>表达式</returns>
        </member>
        <member name="M:System.Linq.OrderbyExtensions.GetSortType(System.String)">
            <summary>
            获取排序类型
            </summary>
            <param name="orderBy">排序类型</param>
            <returns>排序类型</returns>
        </member>
        <member name="T:System.Linq.PredicateBuilder">
            <summary>
            条件生成器
            @ 黄振东
            </summary>
        </member>
        <member name="M:System.Linq.PredicateBuilder.True``1">
            <summary>
            True表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>True表达式</returns>
        </member>
        <member name="M:System.Linq.PredicateBuilder.False``1">
            <summary>
            False表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>False表达式</returns>
        </member>
        <member name="M:System.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合Or表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="expr1">表达式1</param>
            <param name="expr2">表达式2</param>
            <returns>组合Or后的表达式</returns>
        </member>
        <member name="M:System.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合And表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="expr1">表达式1</param>
            <param name="expr2">表达式2</param>
            <returns>组合And后的表达式</returns>
        </member>
        <member name="T:System.AppContextExtensions">
            <summary>
            APP上下文扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:System.AppContextExtensions.SetHttp2Support(System.Boolean)">
            <summary>
            设置http2是否支持
            执行此方法后，默认是启用
            </summary>
            <param name="enable">是否启动</param>
        </member>
        <member name="M:System.AppContextExtensions.SetHttp2UnencryptedSupport(System.Boolean)">
            <summary>
            设置http2非加密是否支持
            例如：GRpc如果要对http进行支持，则需要启用
            执行此方法后，默认是启用
            </summary>
            <param name="enable">是否启动</param>
        </member>
        <member name="T:System.DateTimeExtensions">
            <summary>
            日期时间扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="F:System.DateTimeExtensions.MAX_DATE">
            <summary>
            最大日期
            </summary>
        </member>
        <member name="F:System.DateTimeExtensions.DATE_1970">
            <summary>
            1970的日期
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToFullDateTime(System.DateTime)">
            <summary>
            转换为全部日期时间字符串 yyyy-M-d H:m:s.fff
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>全部日期时间字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToFullFixedDateTime(System.DateTime)">
            <summary>
            转换为固定长度的全部日期时间字符串 yyyy-MM-dd HH:mm:ss.fff
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>全部日期时间字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToDateTime(System.DateTime)">
            <summary>
            转换为日期时间字符串 yyyy-M-d H:m:s
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期时间字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToFixedDateTime(System.DateTime)">
            <summary>
            转换为固定长度的日期时间字符串 yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期时间字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToDate(System.DateTime)">
            <summary>
            转换为日期字符串 yyyy-M-d
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToFixedDate(System.DateTime)">
            <summary>
            转换为固定长度的日期字符串 yyyy-MM-dd
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToLessThanDate(System.DateTime)">
            <summary>
            转换为小于日期，对于SQL查询则需要用小于，而不是小于或等于
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>小于日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToLessThanDate(System.Nullable{System.DateTime})">
            <summary>
            转换为小于日期，对于SQL查询则需要用小于，而不是小于或等于
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>小于日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToLessThanFixedDateString(System.DateTime)">
            <summary>
            转换为固定长度的小于日期字符串，对于SQL查询则需要用小于，而不是小于或等于
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>小于日期字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToYM(System.DateTime)">
            <summary>
            转换为年月字符串 yyyy-M
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年月字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToFixedYM(System.DateTime)">
            <summary>
            转换为固定长度的年月字符串 yyyy-MM
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年月字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToYM(System.Nullable{System.DateTime})">
            <summary>
            转换为年月字符串 yyyy-M
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年月字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToFixedYM(System.Nullable{System.DateTime})">
            <summary>
            转换为固定长度的年月字符串 yyyy-MM
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年月字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToCompactShortDate(System.DateTime)">
            <summary>
            转换为紧凑简短的日期字符串 yyMd
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToCompactFixedShortDate(System.DateTime)">
            <summary>
            转换为紧凑简短固定长度的日期字符串 yyMMdd
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToCompactShortYM(System.DateTime)">
            <summary>
            转换为紧凑简短的年月字符串 yyM
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年月字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToCompactFixedShortYM(System.DateTime)">
            <summary>
            转换为紧凑简短固定长度的年月字符串 yyMM
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年月字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToCompactShortYM(System.Nullable{System.DateTime})">
            <summary>
            转换为紧凑简短的年月字符串 yyM
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年月字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToCompactFixedShortYM(System.Nullable{System.DateTime})">
            <summary>
            转换为紧凑简短固定长度的年月字符串 yyMM
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年月字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.AddThisDayLastTime(System.Nullable{System.DateTime})">
            <summary>
            如果时分秒毫秒都为0，则添加到本日的23:59:59.999
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:System.DateTimeExtensions.AddThisDayLastTime(System.DateTime)">
            <summary>
            如果时分秒毫秒都为0，则添加到本日的23:59:59.999
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ThisMonthFristDay">
            <summary>
            获取本月第1天日期
            </summary>
            <returns>本月第1天日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.MonthFristDay(System.DateTime)">
            <summary>
            获取指定日期的月份第1天日期
            </summary>
            <returns>月份第1天日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ThisMonthLastDay">
            <summary>
            获取本月最后1天日期
            </summary>
            <returns>本月最后1天日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.MonthLastDay(System.DateTime)">
            <summary>
            获取指定日期的月份最后1天日期
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>月份最后1天日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetDis1900Day(System.DateTime)">
            <summary>
            获取给定日期距离1900-01-01的天数
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期距离1900-01-01的天数</returns>
        </member>
        <member name="M:System.DateTimeExtensions.CurrQuarterLastDay">
            <summary>
            获取指定日期的当前季度最后1天日期
            </summary>
            <returns>当前日期的季度最后1天日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.QuarterLastDay(System.DateTime)">
            <summary>
            获取指定日期的季度最后1天日期
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期的季度最后1天日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.QuarterFirstDay">
            <summary>
            获取当前日期的季度第1天日期
            </summary>
            <returns>当前日期的季度第1天日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.QuarterFirstDay(System.DateTime)">
            <summary>
            获取指定日期的季度第1天日期
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期的季度第1天日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetCurrQuarter">
            <summary>
            获取当前季度，从0开始
            </summary>
            <returns>当前季度</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetQuarter(System.DateTime)">
            <summary>
            获取季度，从0开始
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>季度</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsOrdinaryLeapYear">
            <summary>
            判断当前日期是否为普通闰年
            普通闰年：能被4整除但不能被100整除
            </summary>
            <returns>当前日期是否为普通闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsOrdinaryLeapYear(System.DateTime)">
            <summary>
            判断日期是否为普通闰年
            普通闰年：能被4整除但不能被100整除
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期是否为普通闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsOrdinaryLeapYear(System.Int32)">
            <summary>
            判断年份是否为普通闰年
            普通闰年：能被4整除但不能被100整除
            </summary>
            <param name="year">年份</param>
            <returns>年份是否为普通闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsCenturyLeapYear">
            <summary>
            判断当前日期是否为世纪闰年
            世纪闰年：能被400整除
            </summary>
            <returns>当前日期是否为世纪闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsCenturyLeapYear(System.DateTime)">
            <summary>
            判断日期是否为世纪闰年
            世纪闰年：能被400整除
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期是否为世纪闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsCenturyLeapYear(System.Int32)">
            <summary>
            判断年份是否为世纪闰年
            世纪闰年：能被400整除
            </summary>
            <param name="year">年份</param>
            <returns>年份是否为世纪闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsLeapYear">
            <summary>
            判断当前日期是否为闰年
            闰年：能被4整除但不能被100整除或能被400整除
            </summary>
            <returns>当前日期是否为闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsLeapYear(System.DateTime)">
            <summary>
            判断日期是否为闰年
            闰年：能被4整除但不能被100整除或能被400整除
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期是否为世纪闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsLeapYear(System.Int32)">
            <summary>
            判断年份是否为闰年
            闰年：能被4整除但不能被100整除或能被400整除
            </summary>
            <param name="year">年份</param>
            <returns>年份是否为闰年</returns>
        </member>
        <member name="M:System.DateTimeExtensions.PlaceMonthOfDay">
            <summary>
            获取当前日期的所在的月份的天数
            </summary>
            <returns>当前日期的所在的月份的天数</returns>
        </member>
        <member name="M:System.DateTimeExtensions.PlaceMonthOfDay(System.DateTime)">
            <summary>
            获取日期的所在的月份的天数
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期的所在的月份的天数</returns>
        </member>
        <member name="M:System.DateTimeExtensions.RangeMonths(System.DateTime,System.DateTime)">
            <summary>
            时间范围内所过的月份数
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <returns>时间范围内所过的月份数</returns>
        </member>
        <member name="M:System.DateTimeExtensions.MonthExistsRange(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            取出月份存在区间
            </summary>
            <param name="rangeStartMonth">区间开始月份</param>
            <param name="rangeEndMonth">区间结束月份</param>
            <param name="startMonth">开始月份</param>
            <param name="endMonth">结束月份</param>
            <returns>存在的月份集合(yyyy-M)</returns>
        </member>
        <member name="M:System.DateTimeExtensions.FristDay">
            <summary>
            当前年的第一天
            </summary>
            <returns>当前年的第一天</returns>
        </member>
        <member name="M:System.DateTimeExtensions.FristDay(System.DateTime)">
            <summary>
            指定日期的年的第一天
            </summary>
            <returns>年的第一天</returns>
        </member>
        <member name="M:System.DateTimeExtensions.LastDay">
            <summary>
            当前年的最后一天
            </summary>
            <returns>当前年的最后一天</returns>
        </member>
        <member name="M:System.DateTimeExtensions.LastDay(System.DateTime)">
            <summary>
            指定日期的年的最后一天
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>年的最后一天</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToLongDateTimeNumString">
            <summary>
            将当前日期时间转换为长数字字符串
            </summary>
            <returns>长数字字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToLongDateTimeNumString(System.DateTime)">
            <summary>
            将日期时间转换为长数字字符串
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>长数字字符串</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToMonday(System.DateTime)">
            <summary>
            转换为周一日期
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>周一日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToSunday(System.DateTime)">
            <summary>
            转换为周日日期
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>周日日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.FilterTime(System.DateTime)">
            <summary>
            过滤掉时间
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>日期</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToDateTimeFromTimeStamp(System.String)">
            <summary>
            将时间戳转换成日期时间
            </summary>
            <param name="timeStamp">时间戳</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToDateTimeFromTimeStamp(System.Int32)">
            <summary>
            将时间戳转换成日期时间
            </summary>
            <param name="timeStamp">时间戳</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToTimeStampFromDateTime(System.DateTime)">
            <summary>  
            将DateTime时间格式转换为Unix时间戳格式  
            </summary>  
            <param name="dateTime">日期时间</param>  
            <returns>时间戳</returns>  
        </member>
        <member name="M:System.DateTimeExtensions.SetDateTimeToLocalTime(System.Object,System.Byte)">
            <summary>
            设置对象所有日期时间属性为本地时间
            </summary>
            <param name="obj">对象</param>
            <param name="depth">深度</param>
        </member>
        <member name="M:System.DateTimeExtensions.SetDateTimeToLocalTimeFrorCurrDepth(System.Object,System.Byte,System.Byte)">
            <summary>
            设置对象所有日期时间属性为本地时间
            </summary>
            <param name="currDepth">当前深度</param>
            <param name="depth">深度</param>
            <param name="obj">对象</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            异常扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.GetLastInnerException(System.Exception)">
            <summary>
            获取最里面的异常
            </summary>
            <param name="ex">异常</param>
            <returns>最里面的异常</returns>
        </member>
        <member name="T:System.Net.Http.HttpClientExtension">
            <summary>
            HTTP客户端扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.Get(System.String,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Get请求
            </summary>
            <param name="url">URL</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.Get(System.Net.Http.HttpClient,System.String,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Get请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.GetAsync(System.String,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Get请求
            </summary>
            <param name="url">URL</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.GetAsync(System.Net.Http.HttpClient,System.String,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Get请求
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PostJson(System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Post请求JSON
            </summary>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PostJson(System.Net.Http.HttpClient,System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Post请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PostJsonAsync(System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Post请求JSON
            </summary>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PostJsonAsync(System.Net.Http.HttpClient,System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Post请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.Delete(System.String,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Delete请求
            </summary>
            <param name="url">URL</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.Delete(System.Net.Http.HttpClient,System.String,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Get请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.DeleteAsync(System.String,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Delete请求
            </summary>
            <param name="url">URL</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.DeleteAsync(System.Net.Http.HttpClient,System.String,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Delete请求
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PutJson(System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Put请求JSON
            </summary>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PutJson(System.Net.Http.HttpClient,System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Put请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PutJsonAsync(System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Put请求JSON
            </summary>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PutJsonAsync(System.Net.Http.HttpClient,System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Put请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PatchJson(System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Patch请求JSON
            </summary>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PatchJson(System.Net.Http.HttpClient,System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Patch请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PatchJsonAsync(System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Patch请求JSON
            </summary>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.PatchJsonAsync(System.Net.Http.HttpClient,System.String,System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Patch请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="data">数据</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>任务</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.AddBearerTokenToHeader(System.Net.Http.HttpClient,System.String)">
            <summary>
            添加token到头里
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="token">token</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.AddContainerBearerTokenToHeader(System.Net.Http.HttpClient,System.String)">
            <summary>
            添加包含了token到头里
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="containerBearerToken">包含了bearer token</param>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.CreateHttpClient(System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            创建http客户端
            </summary>
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>http客户端</returns>
        </member>
        <member name="M:System.Net.Http.HttpClientExtension.RequestJson(System.Net.Http.HttpClient,System.String,System.String,System.Func{System.Net.Http.HttpContent,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}},System.Object,System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},System.Nullable{System.TimeSpan})">
            <summary>
            请求请求JSON
            </summary>
            <param name="httpClient">http客户端</param>
            <param name="url">URL</param>
            <param name="method">方法</param>
            <param name="callbackRequest">回调请求</param>
            <param name="data">数据</param>        
            <param name="customerOptions">自定义选项配置</param>
            <param name="timeout">超时</param>
            <returns>返回字符串</returns>
        </member>
        <member name="T:System.JsonExtensions">
            <summary>
            JSON扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:System.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean,Newtonsoft.Json.Formatting)">
            <summary>
            将对象转换为JSON字符串
            </summary>
            <param name="obj">对象</param>
            <param name="isIgnoreNull">是否忽略null值，默认为是</param>
            <param name="isUseCamel">是否使用驼蜂风格（即首字母小写），默认为是</param>
            <param name="format">格式化，默认为无</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:System.JsonExtensions.ToJsonObject``1(System.String)">
            <summary>
            将JSON字符串转换为JSON对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonString">JSON字符串</param>
            <returns>JSON对象</returns>
        </member>
        <member name="M:System.JsonExtensions.ToJsonObject(System.String,System.Type)">
            <summary>
            将JSON字符串转换为JSON对象
            </summary>
            <param name="jsonString">JSON字符串</param>
            <param name="type">类型</param>
            <returns>JSON对象</returns>
        </member>
        <member name="M:System.JsonExtensions.ToJsonObjectFromFile``1(System.String)">
            <summary>
            从文件里转换为JSON对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">文件名</param>
            <returns>JSON对象</returns>
        </member>
        <member name="M:System.JsonExtensions.ToJsonObjectFromFile(System.String,System.Type)">
            <summary>
            从文件里转换为JSON对象
            </summary>
            <param name="fileName">文件名</param>
            <param name="type">类型</param>
            <returns>JSON对象</returns>
        </member>
        <member name="M:System.JsonExtensions.WriteJsonFile(System.String,System.Object)">
            <summary>
            写入JSON文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:System.JsonExtensions.ReaderFileContent``1(System.String,System.Func{System.String,``0})">
            <summary>
            读取文件内容
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">文件名</param>
            <param name="action">读取完内容后回调</param>
            <returns>对象</returns>
        </member>
        <member name="T:System.MessagePackExtensions">
            <summary>
            消息包扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:System.MessagePackExtensions.MessagePackSerialize(System.Object)">
            <summary>
            消息包序列化
            </summary>
            <param name="obj">对象</param>
            <returns>序列化后的数据</returns>
        </member>
        <member name="M:System.MessagePackExtensions.MessagePackDeserialize``1(System.Byte[],System.Boolean,System.Byte)">
            <summary>
            消息包反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="data">数据</param>
            <param name="isSetDateTimeToLocalTime">是否设置日期时间为本地时间，默认为否</param>
            <param name="toLocalTimeDepth">转换为本地时间深度</param>
            <returns>对象</returns>
        </member>
        <member name="M:System.MessagePackExtensions.MessagePackDeserialize(System.Byte[],System.Type,System.Boolean,System.Byte)">
            <summary>
            反序列化为对象
            </summary>
            <param name="data">数据</param>
            <param name="type">类型</param>
            <param name="isSetDateTimeToLocalTime">是否设置日期时间为本地时间，默认为否</param>
            <param name="toLocalTimeDepth">转换为本地时间深度</param>
            <returns>对象</returns>
        </member>
        <member name="T:System.PagingExtensions">
            <summary>
            分页扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:System.PagingExtensions.GetPageIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取页码，从0开始
            </summary>
            <param name="page">页码，从1开始</param>
            <param name="pageSize">每页记录数</param>
            <param name="total">总记录</param>
            <returns>页码</returns>
        </member>
        <member name="M:System.PagingExtensions.GetSkipRecordIndex(System.Int32,System.Int32)">
            <summary>
            获取跳过记录索引
            </summary>
            <param name="pageIndex">页码，从0开始</param>
            <param name="pageSize"></param>
            <returns>记录索引</returns>
        </member>
        <member name="T:System.Reflection.ReflectExtensions">
            <summary>
            反射辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="F:System.Reflection.ReflectExtensions.PFX_TASK_FULL_NAME">
            <summary>
            任务全名称前辍
            </summary>
        </member>
        <member name="F:System.Reflection.ReflectExtensions.PFX_ASYNC_FULL_NAME">
            <summary>
            异步全名称前辍
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.Load(System.String[])">
            <summary>
            装载程序集集合
            </summary>
            <param name="assemblys">程序集数组</param>
            <returns>程序集集合</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.LoadType(System.String)">
            <summary>
            加载类型
            </summary>
            <param name="typeName">类型名，如果有程序集则用,分隔</param>
            <returns>类型</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.CreateInstance``1(System.String)">
            <summary>
            创建类型实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="path">路径</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.CreateInstance``1(System.Type)">
            <summary>
            创建类型的实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="type">类型</param>
            <returns>实例</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.CreateInstance(System.String)">
            <summary>
            创建对象实例
            </summary>
            <param name="path">路径</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="property">属性</param>
            <param name="instance">实例</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            获取方法的特性
            </summary>
            <typeparam name="AttributeT">特性类型</typeparam>
            <param name="method">方法</param>
            <returns>特性</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetAttribute``1(System.Type)">
            <summary>
            获取类型的特性
            </summary>
            <typeparam name="AttributeT">特性类型</typeparam>
            <param name="type">类型</param>
            <returns>特性</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetAttributeForEnum``1(System.Type,System.String)">
            <summary>
            为枚举获取特性
            </summary>
            <typeparam name="AttributeT">特性类型</typeparam>
            <param name="enumType">枚举类型</param>
            <param name="enumField">枚举字段</param>
            <returns>特性</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetAssembly(System.String)">
            <summary>
            获取程序集，如果为空，则返回当前程序集
            </summary>
            <param name="assemblyOrFile">程序集名称或文件</param>
            <returns>程序集</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetClassAndAssemblyFullName(System.String,System.String@)">
            <summary>
            获取类全名以及程序集名
            </summary>
            <param name="path">路径，程序集与类名以,分隔；如果没有程序集，则不用传,号</param>
            <param name="assemblyName">程序集名</param>
            <returns>类全名</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.InvokeStaticMethod(System.String,System.Object[])">
            <summary>
            执行静态方法
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <param name="parames">参数数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.InvokeStaticMethod(System.String,System.Reflection.MethodInfo@,System.Object[])">
            <summary>
            执行静态方法
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <param name="method">方法</param>
            <param name="parames">参数数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetMethod(System.String)">
            <summary>
            获取方法
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <returns>方法</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetMethodName(System.String,System.String@)">
            <summary>
            获取方法名
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <param name="classFullPath">类全路径</param>
            <returns>方法名</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetMethodName(System.String,System.String@,System.String@)">
            <summary>
            获取方法名
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <param name="assemblyName">程序集名</param>
            <param name="classFullPath">类全路径</param>
            <returns>方法名</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.CreateInstanceFromMethodFullPath(System.String,System.Reflection.MethodInfo@)">
            <summary>
            创建实例来自方法全路径
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <param name="method">方法</param>
            <returns>实例</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.CreateInstanceFromMethodFullPath``1(System.String,System.Reflection.MethodInfo@)">
            <summary>
            创建实例来自方法全路径
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <param name="method">方法</param>
            <returns>实例</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.CreateInstanceFromMethodFullPath(System.String)">
            <summary>
            创建实例来自方法全路径
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <returns>实例</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.CreateInstanceFromMethodFullPath``1(System.String)">
            <summary>
            创建实例来自方法全路径
            </summary>
            <param name="methodFullPath">方法全路径，全路径以.描述，最后一个.肯定是方法名</param>
            <returns>实例</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.IsMethodReturnVoid(System.Reflection.MethodInfo)">
            <summary>
            判断方法返回值是否为void
            </summary>
            <param name="method">方法</param>
            <returns>方法返回值是否为void</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.IsTypeVoid(System.Type)">
            <summary>
            判断类型返回值是否为void
            </summary>
            <param name="type">方法类型</param>
            <returns>方法返回值是否为void</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.IsMethodReturnTask(System.Reflection.MethodInfo)">
            <summary>
            判断方法返回值是否为任务（异步方法）
            </summary>
            <param name="method">方法</param>
            <returns>方法返回值是否为任务（异步方法）</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.IsTypeTask(System.Type)">
            <summary>
            判断类型是否为任务
            </summary>
            <param name="type">类型</param>
            <returns>类型是否为任务</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.IsTypeNotGenericityTask(System.Type)">
            <summary>
            判断类型是否不带泛型的任务
            </summary>
            <param name="type">类型</param>
            <returns>类型是否不带泛型的任务</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.IsTypeGenericityTask(System.Type)">
            <summary>
            判断类型是否带泛型的任务
            </summary>
            <param name="type">类型</param>
            <returns>判断类型是否带泛型的任务</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetClassType(System.String)">
            <summary>
            获取类类型
            </summary>
            <param name="classFullPath">类全路径</param>
            <returns>类类型</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetImplClassTypeFromCurrExecAssembly(System.Type)">
            <summary>
            从当前执行的程序集里获取指定接口类型的所有实现类类型数组
            </summary>
            <param name="interfaceType">接口类型</param>
            <returns>实现类类型数组</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetImplClassType(System.Type)">
            <summary>
            获取指定接口类型的所有实现类类型数组
            </summary>
            <param name="interfaceType">接口类型</param>
            <returns>实现类类型数组</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetImplClassType(System.Reflection.Assembly[],System.Type)">
            <summary>
            在程序集数组里获取指定接口类型的所有实现类类型数组
            </summary>
            <param name="assemblies">程序集数组</param>
            <param name="interfaceType">接口类型</param>
            <returns>实现类类型数组</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.GetReturnValueType(System.Reflection.MethodInfo)">
            <summary>
            获取方法的返回值类型，如果是Task，则获取Task.Result的类型
            </summary>
            <param name="method">方法</param>
            <returns>方法的返回值类型</returns>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.SyncAssign``1(``0,``0,System.String[])">
            <summary>
            同步赋值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象</param>
            <param name="ignoreProp">忽略属性</param>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.SyncAssign``2(``0,``1,System.String[])">
            <summary>
            同步赋值
            </summary>
            <typeparam name="SourceT">源对象类型</typeparam>
            <typeparam name="TargetT">目标对象类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象</param>
            <param name="ignoreProp">忽略属性</param>
        </member>
        <member name="M:System.Reflection.ReflectExtensions.SetStringNullDefaultValue``1(``0,System.String)">
            <summary>
            设置对象的字符串类型如果为null则设置为默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationFactory">
            <summary>
            配置工厂类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationFactory.BuilderConfig(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            生成配置，通常用在桌面端
            </summary>
            <param name="options">选项配置，如果不传则默认加载appsetting.json</param>
            <returns>配置对象</returns>
        </member>
        <member name="T:Grpc.Net.Client.GRpcChannelUtil">
            <summary>
            GRpc渠道辅助类
            @ 黄振东
            </summary>
            <summary>
            GRpc渠道辅助类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.CreateChannel(System.String,System.Action{Grpc.Net.Client.GrpcChannel,Grpc.Core.Metadata},System.Action{Grpc.Core.RpcException},System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},Grpc.Net.Client.GrpcChannelOptions)">
            <summary>
            创建一个渠道，执行完业务处理方法后，会自动关闭渠道连接
            </summary>
            <param name="address">地址</param>
            <param name="action">回调业务处理方法</param>
            <param name="exAction">发生异常回调，如果为null，则不会捕获异常</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="options">选项配置</param>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.ExecCallBusiness(System.String,Hzdtf.Utility.Extensions.ChannelCustomerOptions,Grpc.Net.Client.GrpcChannel,Grpc.Core.Metadata,System.String,System.Action{Grpc.Net.Client.GrpcChannel,Grpc.Core.Metadata},System.Action{Grpc.Core.RpcException})">
            <summary>
            执行回调业务
            </summary>
            <param name="address">地址</param>
            <param name="options">自定义配置</param>
            <param name="channel">已经创建的渠道</param>
            <param name="headers">头</param>
            <param name="eventId">事件ID</param>
            <param name="action">回调业务动作</param>
            <param name="exAction">发生异常回调，如果为null，则不会捕获异常</param>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.IsRequestGRpc(System.String)">
            <summary>
            判断请求内容类型是否GRpc
            </summary>
            <param name="requestContentType">请求内容</param>
            <returns>请求内容类型是否GRpc</returns>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.ThrowRpcException(System.Exception,System.String)">
            <summary>
            抛出RPC异常
            </summary>
            <param name="ex">异常</param>
            <param name="msg">消息</param>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.ThrowReturnFailureRpcException(Hzdtf.Utility.Model.Return.BasicReturnInfo)">
            <summary>
            如果返回值是错误则抛出RPC异常
            </summary>
            <param name="basicReturn">基本返回</param>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.GetGRpcClient``1(System.Action{``0,Grpc.Core.Metadata},System.Action{Grpc.Core.RpcException},System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions})">
            <summary>
            获取GRpc客户端
            </summary>
            <typeparam name="GRpcClientT">GRpc客户端类型</typeparam>
            <param name="action">回调业务处理方法</param>
            <param name="exAction">发生异常回调，如果为null，则不会捕获异常</param>
            <param name="customerOptions">自定义选项配置</param>
            <returns>GRpc客户端</returns>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.SetRobinBalancingAndStaticResolver(Grpc.Net.ClientFactory.GrpcClientFactoryOptions,System.String)">
            <summary>
            设置轮询负载均衡策略和静态解析
            </summary>
            <param name="options">GRpc工厂选项配置</param>
            <param name="service">服务</param>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.ExecGRpcClient``1(``0,System.Action{``0,Grpc.Core.Metadata},System.Action{Grpc.Core.RpcException},System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions})">
            <summary>
            执行GRpc客户端
            需要在App.GetGRpcClient里设置获取GRpc客户端工厂的实现
            </summary>
            <typeparam name="GRpcClientT">GRpc客户端类型</typeparam>
            <param name="client">客户端</param>
            <param name="action">回调业务处理方法</param>
            <param name="exAction">发生异常回调，如果为null，则不会捕获异常</param>
            <param name="customerOptions">自定义选项配置</param>
            <returns>GRpc客户端</returns>
        </member>
        <member name="M:Grpc.Net.Client.GRpcChannelUtil.GetGRpcClientFormStrategy``1(System.String,System.Func{Grpc.Net.Client.GrpcChannel,``0},System.Action{``0,Grpc.Core.Metadata},System.Action{Grpc.Core.RpcException},System.Action{Hzdtf.Utility.Extensions.ChannelCustomerOptions},Grpc.Net.Client.GrpcChannelOptions)">
            <summary>
            获取策略中的GRpc客户端
            </summary>
            <typeparam name="GRpcClientT">GRpc客户端类型</typeparam>
            <param name="serviceName">服务名</param>
            <param name="createGRpcClient">创建GRpc客户端</param>
            <param name="action">回调业务处理方法</param>
            <param name="exAction">发生异常回调，如果为null，则不会捕获异常</param>
            <param name="customerOptions">自定义选项配置</param>
            <param name="options">grpc选项配置</param>
            <returns>GRpc客户端</returns>
        </member>
    </members>
</doc>
